use ast::*;
use tok::{self, Tok};
use std::str::FromStr;
use unicode_xid::UnicodeXID;

grammar<'input>(text: &'input str)["LALR(1)"];

pub Module: Module =  {
  <lo:@L> "module" <n: Name> <ds: (Item)*> <hi:@R> =>
    Module {
        span: Span::new(lo, hi),
        name: n,
        items: ds,
    },
};

Item: Item = {
  <lo:@L> <d: ItemNoSpan> <hi:@R> => {
    let mut d = d;
    d.set_span(Span::new(lo, hi)); d
  }
};

ItemNoSpan: Item = {
  <d: Inductive> => Item::Inductive(d),
  <f: Def> => Item::Def(f),
  <e: Extern> => Item::Extern(e),
  <i: Import> => Item::Import(i),
};

Inductive: Inductive = {
 "inductive" <n: Name> <ps : Parameters> <ty: (":" Term)?> <attrs: (<Constructor>)*> "end" =>
  Inductive {
    span: Span::dummy(),
    name: n,
    parameters: ps,
    ty: ty.map(|t| t.1).unwrap_or(Term::Type),
    ctors: attrs,
  }
};

Constructor: (Name, Term) = {
    "|" <n: Name> ":" <t: Term> =>  (n, t)
};

Def: Def = {
    "def" <n: Name> <args: Parameters> ":" <t: Term> ":=" <body: Term> "end" =>
      Def {
          span: Span::dummy(),
          name: n,
          args: args,
          ty: t,
          body: body,
      }
};

Extern: Extern = {
   "extern" <n : Name> ":" <t : Term> =>
    Extern {
      span: Span::dummy(),
      name: n,
      term: t,
    }
};

Import: Name = {
    "import" <n : Name> => n,
};

Parameters: Vec<Binder> = {
  <ps: Binder*> => ps,
};

Binder: Binder = {
    "(" <n : Name> ":" <ty : Term1> ")" => Binder {
        span: Span::new(n.span.lo - 1, ty.get_span().hi + 1),
        name: n,
        ty: ty,
        mode: BindingMode::Explicit,
    },
    "{" <n : Name> ":" <ty: Term1> "}" => Binder {
        span: Span::new(n.span.lo - 1, ty.get_span().hi + 1),
        name: n,
        ty: ty,
        mode: BindingMode::Implicit,
    },
};

pub Term: Term = {
  <lo:@L> <t: TermUS> <hi:@R>  => {
    let mut t = t;
    t.set_span(Span::new(lo, hi));
    t
  }
};

TermUS: Term = {
   "forall" <args: (Binder+)> "," <body: Term> => {
      Term::Forall {
          span: Span::dummy(),
          binders: args,
          term: Box::new(body)
      }
  },
  "fun" <args: (Binder+)> <t: (":" Term)?> "=>" <body: Term> => Term::Lambda {
      span: Span::dummy(),
      args: args,
      ret_ty: Box::new(t.map(|x| x.1)),
      body: Box::new(body)
  },
  "let" <bindings: (Binding ",")+> "in" <body: Term> => {
      Term::Let {
          bindings: bindings.into_iter().map(|b| b.0).collect(),
          body: Box::new(body),
          span: Span::dummy(),
      }
   },
  <t: TermFnType> => t
};

Binding : (Binder, Term) = {
    <n: Name> ":" <ty: Term> ":=" <rhs: Term> => {
        let binder = Binder {
            span: n.span,
            name: n,
            ty: ty,
            mode: BindingMode::Explicit,
        };

        (binder, rhs)
    }
};

TermFnType : Term = {
  <t1: Term1> "->" <t2: TermFnType> => {
      let span = Span::new(
        t1.get_span().lo,
        t2.get_span().hi);

      let mut name =
        Name::from_str("");

      name.set_span(t1.get_span());

      let binder = Binder {
        span: t1.get_span(),
        name: name,
        ty: t1,
        mode: BindingMode::Explicit,
      };

      Term::Forall {
        span: span,
        binders: vec![binder],
        term: Box::new(t2)
      }
  },
  <t: Term1> => t
};

Term1: Term = {
    <f: Term1> <g: Term0> => Term::App {
      span: Span::new(f.get_span().lo, g.get_span().hi),
      fun: Box::new(f),
      arg: Box::new(g)
    },
    <t : Term0> => t,
};

Term0: Term = {
  <lo:@L> <t: Term0US> <hi:@R>  => {
    let mut t = t;
    t.set_span(Span::new(lo, hi));
    t
  }
};

Term0US: Term = {
  <n : Name> => Term::Var { name: n },
  <m : Match> => Term::Match {
    span: Span::dummy(),
    scrutinee: Box::new(m.0),
    cases: m.1
  },
  "Type" => Term::Type,
  "(" <t:TermUS> ")" => t,
};

Match: (Term, Vec<Case>) = {
  "match" <scrutinee: Term> "with" <cs: (Case)*> "end"  =>
  (scrutinee, cs)
};

Case: Case = {
  <lo:@L> "|" <p: Pattern> "=>" <body: Term> <hi:@R> => Case {
      span: Span::new(lo, hi),
      pattern: p,
      rhs: body,
  }
};

Pattern: Pattern = {
    <n : Name> <ns: PatternO*> => Pattern::Constructor(n, ns),
};

PatternO: Pattern = {
    <n : Name> => Pattern::Name(n),
    "(" <p: Pattern> ")" => p,
};

Name: Name = {
  <lo:@L> <nk : NameKind> <hi: @R> => {
        Name {
            span: Span::new(lo, hi),
            repr: nk,
        }
    },
};

NameKind: NameKind = {
  <nk: NameVec> => if nk.len() == 1 {
      let unqual = nk[0].clone();
      NameKind::Unqualified(unqual)
  } else {
      NameKind::Qualified(nk)
  },
  "_" => NameKind::Placeholder,
};

NameVec: Vec<String> = {
   <prefix : NameVec> "." <end : "Id"> => {
        let mut prefix = prefix; prefix.push(end.to_string()); prefix
    },
    <s : "Id"> => vec![s.to_string()],
};

extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
        "def" => Tok::Def,
        "end" => Tok::End,
        "extern" => Tok::Extern,
        "forall" => Tok::Forall,
        "fun" => Tok::Fun,
        "inductive" => Tok::Inductive,
        "in" => Tok::In,
        "import" => Tok::Import,
        "let" => Tok::Let,
        "match" => Tok::Match,
        "module" => Tok::Module,
        "pub" => Tok::Pub,
        "Type" => Tok::Type,
        "with" => Tok::With,
        "|" => Tok::Bar,
        ":" => Tok::Colon,
        ":=" => Tok::ColonEq,
        "(" => Tok::LeftParen,
        ")" => Tok::RightParen,
        "{" => Tok::LeftBrace,
        "}" => Tok::RightBrace,
        "," => Tok::Comma,
        "=>" => Tok::FatArrow,
        "->" => Tok::Arrow,
        "_" => Tok::Underscore,
        "." => Tok::Period,
        "Comment" => Tok::Comment(<&'input str>),
        "Id" => Tok::Id(<&'input str>),
    }
}
