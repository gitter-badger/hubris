use ast::*;
use std::str::FromStr;

grammar;

pub Module: Module =  {
  "module" <n: Name> <ds: (Def)*> =>
    Module {
        name: n,
        defs: ds,
    },
};

Def: Definition = {
  <d: Data> => Definition::Data(d),
  <f: Fn> => Definition::Fn(f),
  <c: Comment> => Definition::Comment(()),
  <e: Extern> => Definition::Extern(e),
};

Data: Data = {
"data" <n: Name> <attrs: (<Constructor>)*> "end" => Data {
      name: n,
      ctors: attrs,
  }
};

Constructor: (Name, Term) = {
    "|" <n: Name> ":" <t: Type> =>  (n, t)
};

Attribute: (Name, Term) = {
  <n: Name> ":" <t: Type> =>  (n, t)
};

Fn: Function = {
    "fn" <n: Name> <args: (Arg*)> ":" <t: Type> ":=" <body: Term> "end" =>
      Function {
          name: n,
          args: args,
          ty: t,
          body: body,
      }
};

Extern: Extern = {
    "extern" <n : Name> ":" <t : Type> => Extern(n, t)
};

Arg: (Name, Term) = {
    "(" <n : Name> ":" <ty : Type> ")" => (n, ty)
};

Term: Term = {
    "fun" <args: (Arg+)> ":" <t: Type> "=>" <body: Term0> =>
      Term::Lambda(args, Box::new(t), Box::new(body)),
    <f: Term> <g: Term0> => Term::App(Box::new(f), Box::new(g)),
    <t : Term0> => t,
};

Term0: Term = {
  <n : Name> => Term::Var(n),
  <l : Literal> => Term::Literal(l),
  <m : Match> => Term::Match(Box::new(m.0), m.1),
  r"\?[a-zA-Z_][a-zA-Z0-9_]*" => Term::Metavar(<>.to_string()),
  "(" <t:Term> ")" => t,
};

Match: (Term, Vec<Case>) = {
  "match" <scrutinee: Term> "with" <cs: (Case)*> "end" =>
  (scrutinee, cs)
};

Case: Case = {
  "|" <p: Pattern> "=>" <body: Term> => Case {
      pattern: p,
      rhs: body,
  }
};

Pattern: Pattern = {
    <n : Name> <ns: PatternO*> => Pattern::Constructor(n, ns),
};

PatternO: Pattern = {
    <n : Name> => Pattern::Name(n),
    "_" => Pattern::Placeholder,
    "(" <p: Pattern> ")" => p,
};

Type: Term = {
    "Type" => Term::Type,
    <t1: Type> "->" <t2: Type0> => Term::Forall("".to_string(), Box::new(t1), Box::new(t2)),
    <t: Term0> => t,
};

Type0: Term = {
    "Type" => Term::Type,
    <n: Name> => Term::Var(n),
    "(" <t: Type> ")" => t,
};

Name: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_owned()
};

Literal: Literal = {
    r"[1-9][0-9]+" => Literal::Int(i64::from_str(<>).unwrap()),
    r"\(\)" => Literal::Unit,
};

Comment: () = {
    r"--[^\n]*\n" => ()
};
