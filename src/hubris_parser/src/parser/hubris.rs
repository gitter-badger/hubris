#![allow(unused_imports)]
#![allow(unused_variables)]
use ast::*;
use std::str::FromStr;
extern crate lalrpop_util as __lalrpop_util;
use self::__lalrpop_util::ParseError as __ParseError;

mod __parse__Module {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use ast::*;
    use std::str::FromStr;
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_Module<
        'input,
    >(
        input: &'input str,
    ) -> Result<Module, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____Module(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        _28_3cConstructor_3e_29((Name, Term)),
        _28_3cConstructor_3e_29_2a(::std::vec::Vec<(Name, Term)>),
        _28_3cConstructor_3e_29_2b(::std::vec::Vec<(Name, Term)>),
        _28Arg_2a_29(::std::vec::Vec<(Name, Term)>),
        _28Arg_2b_29(::std::vec::Vec<(Name, Term)>),
        _28Case_29(Case),
        _28Case_29_2a(::std::vec::Vec<Case>),
        _28Case_29_2b(::std::vec::Vec<Case>),
        _28Def_29(Definition),
        _28Def_29_2a(::std::vec::Vec<Definition>),
        _28Def_29_2b(::std::vec::Vec<Definition>),
        Arg((Name, Term)),
        Arg_2a(::std::vec::Vec<(Name, Term)>),
        Arg_2b(::std::vec::Vec<(Name, Term)>),
        Attribute((Name, Term)),
        Case(Case),
        Comment(()),
        Constructor((Name, Term)),
        Data(Data),
        Def(Definition),
        Extern(Extern),
        Fn(Function),
        Literal(Literal),
        Match((Term, Vec<Case>)),
        Module(Module),
        Name(String),
        Pattern(Pattern),
        PatternO(Pattern),
        PatternO_2a(::std::vec::Vec<Pattern>),
        PatternO_2b(::std::vec::Vec<Pattern>),
        Term(Term),
        Term0(Term),
        Type(Term),
        Type0(Term),
        ____Module(Module),
    }

    // State 0
    //   Module = (*) "module" Name [EOF]
    //   Module = (*) "module" Name (Def)+ [EOF]
    //   __Module = (*) Module [EOF]
    //
    //   "module" -> Shift(S2)
    //
    //   Module -> S1
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state2(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Module(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __Module = Module (*) [EOF]
    //
    //   EOF -> Reduce(__Module = Module => ActionFn(0);)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Module>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action0(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____Module(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   Module = "module" (*) Name [EOF]
    //   Module = "module" (*) Name (Def)+ [EOF]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [EOF]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["data"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["extern"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["fn"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"--[^\\n]*\\n"#]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S4)
    //
    //   Name -> S3
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state4(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state3(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 3
    //   (Def)+ = (*) (Def)+ Def [EOF]
    //   (Def)+ = (*) (Def)+ Def ["data"]
    //   (Def)+ = (*) (Def)+ Def ["extern"]
    //   (Def)+ = (*) (Def)+ Def ["fn"]
    //   (Def)+ = (*) (Def)+ Def [r#"--[^\\n]*\\n"#]
    //   (Def)+ = (*) Def [EOF]
    //   (Def)+ = (*) Def ["data"]
    //   (Def)+ = (*) Def ["extern"]
    //   (Def)+ = (*) Def ["fn"]
    //   (Def)+ = (*) Def [r#"--[^\\n]*\\n"#]
    //   Comment = (*) r#"--[^\\n]*\\n"# [EOF]
    //   Comment = (*) r#"--[^\\n]*\\n"# ["data"]
    //   Comment = (*) r#"--[^\\n]*\\n"# ["extern"]
    //   Comment = (*) r#"--[^\\n]*\\n"# ["fn"]
    //   Comment = (*) r#"--[^\\n]*\\n"# [r#"--[^\\n]*\\n"#]
    //   Data = (*) "data" Name (<Constructor>)+ "end" [EOF]
    //   Data = (*) "data" Name (<Constructor>)+ "end" ["data"]
    //   Data = (*) "data" Name (<Constructor>)+ "end" ["extern"]
    //   Data = (*) "data" Name (<Constructor>)+ "end" ["fn"]
    //   Data = (*) "data" Name (<Constructor>)+ "end" [r#"--[^\\n]*\\n"#]
    //   Data = (*) "data" Name "end" [EOF]
    //   Data = (*) "data" Name "end" ["data"]
    //   Data = (*) "data" Name "end" ["extern"]
    //   Data = (*) "data" Name "end" ["fn"]
    //   Data = (*) "data" Name "end" [r#"--[^\\n]*\\n"#]
    //   Def = (*) Comment [EOF]
    //   Def = (*) Comment ["data"]
    //   Def = (*) Comment ["extern"]
    //   Def = (*) Comment ["fn"]
    //   Def = (*) Comment [r#"--[^\\n]*\\n"#]
    //   Def = (*) Data [EOF]
    //   Def = (*) Data ["data"]
    //   Def = (*) Data ["extern"]
    //   Def = (*) Data ["fn"]
    //   Def = (*) Data [r#"--[^\\n]*\\n"#]
    //   Def = (*) Extern [EOF]
    //   Def = (*) Extern ["data"]
    //   Def = (*) Extern ["extern"]
    //   Def = (*) Extern ["fn"]
    //   Def = (*) Extern [r#"--[^\\n]*\\n"#]
    //   Def = (*) Fn [EOF]
    //   Def = (*) Fn ["data"]
    //   Def = (*) Fn ["extern"]
    //   Def = (*) Fn ["fn"]
    //   Def = (*) Fn [r#"--[^\\n]*\\n"#]
    //   Extern = (*) "extern" Name ":" Type [EOF]
    //   Extern = (*) "extern" Name ":" Type ["data"]
    //   Extern = (*) "extern" Name ":" Type ["extern"]
    //   Extern = (*) "extern" Name ":" Type ["fn"]
    //   Extern = (*) "extern" Name ":" Type [r#"--[^\\n]*\\n"#]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" [EOF]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" ["data"]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" ["extern"]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" ["fn"]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" [EOF]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" ["data"]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" ["extern"]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" ["fn"]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Module = "module" Name (*) [EOF]
    //   Module = "module" Name (*) (Def)+ [EOF]
    //
    //   EOF -> Reduce(Module = "module", Name => ActionFn(76);)
    //   "data" -> Shift(S11)
    //   "extern" -> Shift(S12)
    //   "fn" -> Shift(S13)
    //   r#"--[^\\n]*\\n"# -> Shift(S14)
    //
    //   (Def)+ -> S5
    //   Comment -> S6
    //   Data -> S7
    //   Def -> S8
    //   Extern -> S9
    //   Fn -> S10
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action76(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Module(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Def_29_2b(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Comment(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Data(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Def(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Extern(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Fn(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state10(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [EOF]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["data"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["extern"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["fn"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "data" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "extern" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "fn" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 5
    //   (Def)+ = (Def)+ (*) Def [EOF]
    //   (Def)+ = (Def)+ (*) Def ["data"]
    //   (Def)+ = (Def)+ (*) Def ["extern"]
    //   (Def)+ = (Def)+ (*) Def ["fn"]
    //   (Def)+ = (Def)+ (*) Def [r#"--[^\\n]*\\n"#]
    //   Comment = (*) r#"--[^\\n]*\\n"# [EOF]
    //   Comment = (*) r#"--[^\\n]*\\n"# ["data"]
    //   Comment = (*) r#"--[^\\n]*\\n"# ["extern"]
    //   Comment = (*) r#"--[^\\n]*\\n"# ["fn"]
    //   Comment = (*) r#"--[^\\n]*\\n"# [r#"--[^\\n]*\\n"#]
    //   Data = (*) "data" Name (<Constructor>)+ "end" [EOF]
    //   Data = (*) "data" Name (<Constructor>)+ "end" ["data"]
    //   Data = (*) "data" Name (<Constructor>)+ "end" ["extern"]
    //   Data = (*) "data" Name (<Constructor>)+ "end" ["fn"]
    //   Data = (*) "data" Name (<Constructor>)+ "end" [r#"--[^\\n]*\\n"#]
    //   Data = (*) "data" Name "end" [EOF]
    //   Data = (*) "data" Name "end" ["data"]
    //   Data = (*) "data" Name "end" ["extern"]
    //   Data = (*) "data" Name "end" ["fn"]
    //   Data = (*) "data" Name "end" [r#"--[^\\n]*\\n"#]
    //   Def = (*) Comment [EOF]
    //   Def = (*) Comment ["data"]
    //   Def = (*) Comment ["extern"]
    //   Def = (*) Comment ["fn"]
    //   Def = (*) Comment [r#"--[^\\n]*\\n"#]
    //   Def = (*) Data [EOF]
    //   Def = (*) Data ["data"]
    //   Def = (*) Data ["extern"]
    //   Def = (*) Data ["fn"]
    //   Def = (*) Data [r#"--[^\\n]*\\n"#]
    //   Def = (*) Extern [EOF]
    //   Def = (*) Extern ["data"]
    //   Def = (*) Extern ["extern"]
    //   Def = (*) Extern ["fn"]
    //   Def = (*) Extern [r#"--[^\\n]*\\n"#]
    //   Def = (*) Fn [EOF]
    //   Def = (*) Fn ["data"]
    //   Def = (*) Fn ["extern"]
    //   Def = (*) Fn ["fn"]
    //   Def = (*) Fn [r#"--[^\\n]*\\n"#]
    //   Extern = (*) "extern" Name ":" Type [EOF]
    //   Extern = (*) "extern" Name ":" Type ["data"]
    //   Extern = (*) "extern" Name ":" Type ["extern"]
    //   Extern = (*) "extern" Name ":" Type ["fn"]
    //   Extern = (*) "extern" Name ":" Type [r#"--[^\\n]*\\n"#]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" [EOF]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" ["data"]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" ["extern"]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" ["fn"]
    //   Fn = (*) "fn" Name Arg+ ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" [EOF]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" ["data"]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" ["extern"]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" ["fn"]
    //   Fn = (*) "fn" Name ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Module = "module" Name (Def)+ (*) [EOF]
    //
    //   EOF -> Reduce(Module = "module", Name, (Def)+ => ActionFn(77);)
    //   "data" -> Shift(S11)
    //   "extern" -> Shift(S12)
    //   "fn" -> Shift(S13)
    //   r#"--[^\\n]*\\n"# -> Shift(S14)
    //
    //   Comment -> S6
    //   Data -> S7
    //   Def -> S15
    //   Extern -> S9
    //   Fn -> S10
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<Definition>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym3));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action77(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Module(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Comment(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Data(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Def(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2, __sym3));
                }
                __Nonterminal::Extern(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Fn(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state10(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 6
    //   Def = Comment (*) [EOF]
    //   Def = Comment (*) ["data"]
    //   Def = Comment (*) ["extern"]
    //   Def = Comment (*) ["fn"]
    //   Def = Comment (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Def = Comment => ActionFn(4);)
    //   "data" -> Reduce(Def = Comment => ActionFn(4);)
    //   "extern" -> Reduce(Def = Comment => ActionFn(4);)
    //   "fn" -> Reduce(Def = Comment => ActionFn(4);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Def = Comment => ActionFn(4);)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<()>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action4(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Def(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 7
    //   Def = Data (*) [EOF]
    //   Def = Data (*) ["data"]
    //   Def = Data (*) ["extern"]
    //   Def = Data (*) ["fn"]
    //   Def = Data (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Def = Data => ActionFn(2);)
    //   "data" -> Reduce(Def = Data => ActionFn(2);)
    //   "extern" -> Reduce(Def = Data => ActionFn(2);)
    //   "fn" -> Reduce(Def = Data => ActionFn(2);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Def = Data => ActionFn(2);)
    //
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Data>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action2(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Def(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 8
    //   (Def)+ = Def (*) [EOF]
    //   (Def)+ = Def (*) ["data"]
    //   (Def)+ = Def (*) ["extern"]
    //   (Def)+ = Def (*) ["fn"]
    //   (Def)+ = Def (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce((Def)+ = Def => ActionFn(74);)
    //   "data" -> Reduce((Def)+ = Def => ActionFn(74);)
    //   "extern" -> Reduce((Def)+ = Def => ActionFn(74);)
    //   "fn" -> Reduce((Def)+ = Def => ActionFn(74);)
    //   r#"--[^\\n]*\\n"# -> Reduce((Def)+ = Def => ActionFn(74);)
    //
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Definition>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action74(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::_28Def_29_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 9
    //   Def = Extern (*) [EOF]
    //   Def = Extern (*) ["data"]
    //   Def = Extern (*) ["extern"]
    //   Def = Extern (*) ["fn"]
    //   Def = Extern (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Def = Extern => ActionFn(5);)
    //   "data" -> Reduce(Def = Extern => ActionFn(5);)
    //   "extern" -> Reduce(Def = Extern => ActionFn(5);)
    //   "fn" -> Reduce(Def = Extern => ActionFn(5);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Def = Extern => ActionFn(5);)
    //
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Extern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action5(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Def(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 10
    //   Def = Fn (*) [EOF]
    //   Def = Fn (*) ["data"]
    //   Def = Fn (*) ["extern"]
    //   Def = Fn (*) ["fn"]
    //   Def = Fn (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Def = Fn => ActionFn(3);)
    //   "data" -> Reduce(Def = Fn => ActionFn(3);)
    //   "extern" -> Reduce(Def = Fn => ActionFn(3);)
    //   "fn" -> Reduce(Def = Fn => ActionFn(3);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Def = Fn => ActionFn(3);)
    //
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Function>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Def(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 11
    //   Data = "data" (*) Name (<Constructor>)+ "end" [EOF]
    //   Data = "data" (*) Name (<Constructor>)+ "end" ["data"]
    //   Data = "data" (*) Name (<Constructor>)+ "end" ["extern"]
    //   Data = "data" (*) Name (<Constructor>)+ "end" ["fn"]
    //   Data = "data" (*) Name (<Constructor>)+ "end" [r#"--[^\\n]*\\n"#]
    //   Data = "data" (*) Name "end" [EOF]
    //   Data = "data" (*) Name "end" ["data"]
    //   Data = "data" (*) Name "end" ["extern"]
    //   Data = "data" (*) Name "end" ["fn"]
    //   Data = "data" (*) Name "end" [r#"--[^\\n]*\\n"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S17)
    //
    //   Name -> S16
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state16(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 12
    //   Extern = "extern" (*) Name ":" Type [EOF]
    //   Extern = "extern" (*) Name ":" Type ["data"]
    //   Extern = "extern" (*) Name ":" Type ["extern"]
    //   Extern = "extern" (*) Name ":" Type ["fn"]
    //   Extern = "extern" (*) Name ":" Type [r#"--[^\\n]*\\n"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":"]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   Name -> S18
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 13
    //   Fn = "fn" (*) Name Arg+ ":" Type ":=" Term "end" [EOF]
    //   Fn = "fn" (*) Name Arg+ ":" Type ":=" Term "end" ["data"]
    //   Fn = "fn" (*) Name Arg+ ":" Type ":=" Term "end" ["extern"]
    //   Fn = "fn" (*) Name Arg+ ":" Type ":=" Term "end" ["fn"]
    //   Fn = "fn" (*) Name Arg+ ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Fn = "fn" (*) Name ":" Type ":=" Term "end" [EOF]
    //   Fn = "fn" (*) Name ":" Type ":=" Term "end" ["data"]
    //   Fn = "fn" (*) Name ":" Type ":=" Term "end" ["extern"]
    //   Fn = "fn" (*) Name ":" Type ":=" Term "end" ["fn"]
    //   Fn = "fn" (*) Name ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":"]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S21)
    //
    //   Name -> S20
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 14
    //   Comment = r#"--[^\\n]*\\n"# (*) [EOF]
    //   Comment = r#"--[^\\n]*\\n"# (*) ["data"]
    //   Comment = r#"--[^\\n]*\\n"# (*) ["extern"]
    //   Comment = r#"--[^\\n]*\\n"# (*) ["fn"]
    //   Comment = r#"--[^\\n]*\\n"# (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Comment = r#"--[^\\n]*\\n"# => ActionFn(35);)
    //   "data" -> Reduce(Comment = r#"--[^\\n]*\\n"# => ActionFn(35);)
    //   "extern" -> Reduce(Comment = r#"--[^\\n]*\\n"# => ActionFn(35);)
    //   "fn" -> Reduce(Comment = r#"--[^\\n]*\\n"# => ActionFn(35);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Comment = r#"--[^\\n]*\\n"# => ActionFn(35);)
    //
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action35(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Comment(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 15
    //   (Def)+ = (Def)+ Def (*) [EOF]
    //   (Def)+ = (Def)+ Def (*) ["data"]
    //   (Def)+ = (Def)+ Def (*) ["extern"]
    //   (Def)+ = (Def)+ Def (*) ["fn"]
    //   (Def)+ = (Def)+ Def (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce((Def)+ = (Def)+, Def => ActionFn(75);)
    //   "data" -> Reduce((Def)+ = (Def)+, Def => ActionFn(75);)
    //   "extern" -> Reduce((Def)+ = (Def)+, Def => ActionFn(75);)
    //   "fn" -> Reduce((Def)+ = (Def)+, Def => ActionFn(75);)
    //   r#"--[^\\n]*\\n"# -> Reduce((Def)+ = (Def)+, Def => ActionFn(75);)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Definition>>,
        __sym1: &mut Option<Definition>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action75(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::_28Def_29_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 16
    //   (<Constructor>)+ = (*) (<Constructor>)+ Constructor ["end"]
    //   (<Constructor>)+ = (*) (<Constructor>)+ Constructor ["|"]
    //   (<Constructor>)+ = (*) Constructor ["end"]
    //   (<Constructor>)+ = (*) Constructor ["|"]
    //   Constructor = (*) "|" Name ":" Type ["end"]
    //   Constructor = (*) "|" Name ":" Type ["|"]
    //   Data = "data" Name (*) (<Constructor>)+ "end" [EOF]
    //   Data = "data" Name (*) (<Constructor>)+ "end" ["data"]
    //   Data = "data" Name (*) (<Constructor>)+ "end" ["extern"]
    //   Data = "data" Name (*) (<Constructor>)+ "end" ["fn"]
    //   Data = "data" Name (*) (<Constructor>)+ "end" [r#"--[^\\n]*\\n"#]
    //   Data = "data" Name (*) "end" [EOF]
    //   Data = "data" Name (*) "end" ["data"]
    //   Data = "data" Name (*) "end" ["extern"]
    //   Data = "data" Name (*) "end" ["fn"]
    //   Data = "data" Name (*) "end" [r#"--[^\\n]*\\n"#]
    //
    //   "end" -> Shift(S24)
    //   "|" -> Shift(S25)
    //
    //   (<Constructor>)+ -> S22
    //   Constructor -> S23
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state24(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state25(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28_3cConstructor_3e_29_2b(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state22(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Constructor(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state23(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 17
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "end" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "|" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 18
    //   Extern = "extern" Name (*) ":" Type [EOF]
    //   Extern = "extern" Name (*) ":" Type ["data"]
    //   Extern = "extern" Name (*) ":" Type ["extern"]
    //   Extern = "extern" Name (*) ":" Type ["fn"]
    //   Extern = "extern" Name (*) ":" Type [r#"--[^\\n]*\\n"#]
    //
    //   ":" -> Shift(S26)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state26(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 19
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [":"]
    //
    //   ":" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 20
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = (*) Arg ["("]
    //   Arg+ = (*) Arg [":"]
    //   Arg+ = (*) Arg+ Arg ["("]
    //   Arg+ = (*) Arg+ Arg [":"]
    //   Fn = "fn" Name (*) Arg+ ":" Type ":=" Term "end" [EOF]
    //   Fn = "fn" Name (*) Arg+ ":" Type ":=" Term "end" ["data"]
    //   Fn = "fn" Name (*) Arg+ ":" Type ":=" Term "end" ["extern"]
    //   Fn = "fn" Name (*) Arg+ ":" Type ":=" Term "end" ["fn"]
    //   Fn = "fn" Name (*) Arg+ ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Fn = "fn" Name (*) ":" Type ":=" Term "end" [EOF]
    //   Fn = "fn" Name (*) ":" Type ":=" Term "end" ["data"]
    //   Fn = "fn" Name (*) ":" Type ":=" Term "end" ["extern"]
    //   Fn = "fn" Name (*) ":" Type ":=" Term "end" ["fn"]
    //   Fn = "fn" Name (*) ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //
    //   "(" -> Shift(S29)
    //   ":" -> Shift(S30)
    //
    //   Arg -> S27
    //   Arg+ -> S28
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state30(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arg_2b(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 21
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [":"]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   ":" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 22
    //   (<Constructor>)+ = (<Constructor>)+ (*) Constructor ["end"]
    //   (<Constructor>)+ = (<Constructor>)+ (*) Constructor ["|"]
    //   Constructor = (*) "|" Name ":" Type ["end"]
    //   Constructor = (*) "|" Name ":" Type ["|"]
    //   Data = "data" Name (<Constructor>)+ (*) "end" [EOF]
    //   Data = "data" Name (<Constructor>)+ (*) "end" ["data"]
    //   Data = "data" Name (<Constructor>)+ (*) "end" ["extern"]
    //   Data = "data" Name (<Constructor>)+ (*) "end" ["fn"]
    //   Data = "data" Name (<Constructor>)+ (*) "end" [r#"--[^\\n]*\\n"#]
    //
    //   "end" -> Shift(S32)
    //   "|" -> Shift(S25)
    //
    //   Constructor -> S31
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state32(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state25(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Constructor(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 23
    //   (<Constructor>)+ = Constructor (*) ["end"]
    //   (<Constructor>)+ = Constructor (*) ["|"]
    //
    //   "end" -> Reduce((<Constructor>)+ = Constructor => ActionFn(61);)
    //   "|" -> Reduce((<Constructor>)+ = Constructor => ActionFn(61);)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Name, Term)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action61(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::_28_3cConstructor_3e_29_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 24
    //   Data = "data" Name "end" (*) [EOF]
    //   Data = "data" Name "end" (*) ["data"]
    //   Data = "data" Name "end" (*) ["extern"]
    //   Data = "data" Name "end" (*) ["fn"]
    //   Data = "data" Name "end" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Data = "data", Name, "end" => ActionFn(63);)
    //   "data" -> Reduce(Data = "data", Name, "end" => ActionFn(63);)
    //   "extern" -> Reduce(Data = "data", Name, "end" => ActionFn(63);)
    //   "fn" -> Reduce(Data = "data", Name, "end" => ActionFn(63);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Data = "data", Name, "end" => ActionFn(63);)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action63(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Data(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 25
    //   Constructor = "|" (*) Name ":" Type ["end"]
    //   Constructor = "|" (*) Name ":" Type ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":"]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   Name -> S33
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 26
    //   Extern = "extern" Name ":" (*) Type [EOF]
    //   Extern = "extern" Name ":" (*) Type ["data"]
    //   Extern = "extern" Name ":" (*) Type ["extern"]
    //   Extern = "extern" Name ":" (*) Type ["fn"]
    //   Extern = "extern" Name ":" (*) Type [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [EOF]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["data"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["extern"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["fn"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"\\(\\)"# [EOF]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# ["data"]
    //   Literal = (*) r#"\\(\\)"# ["extern"]
    //   Literal = (*) r#"\\(\\)"# ["fn"]
    //   Literal = (*) r#"\\(\\)"# [r#"--[^\\n]*\\n"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [EOF]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["data"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["extern"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["fn"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"--[^\\n]*\\n"#]
    //   Match = (*) "match" Term "with" "end" [EOF]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["data"]
    //   Match = (*) "match" Term "with" "end" ["extern"]
    //   Match = (*) "match" Term "with" "end" ["fn"]
    //   Match = (*) "match" Term "with" "end" [r#"--[^\\n]*\\n"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [EOF]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["data"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["extern"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["fn"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) Literal [EOF]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal ["data"]
    //   Term0 = (*) Literal ["extern"]
    //   Term0 = (*) Literal ["fn"]
    //   Term0 = (*) Literal [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) Match [EOF]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match ["data"]
    //   Term0 = (*) Match ["extern"]
    //   Term0 = (*) Match ["fn"]
    //   Term0 = (*) Match [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) Name [EOF]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name ["data"]
    //   Term0 = (*) Name ["extern"]
    //   Term0 = (*) Name ["fn"]
    //   Term0 = (*) Name [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) "(" Term ")" [EOF]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" ["data"]
    //   Term0 = (*) "(" Term ")" ["extern"]
    //   Term0 = (*) "(" Term ")" ["fn"]
    //   Term0 = (*) "(" Term ")" [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [EOF]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["data"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["extern"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["fn"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"--[^\\n]*\\n"#]
    //   Type = (*) Term0 [EOF]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 ["data"]
    //   Type = (*) Term0 ["extern"]
    //   Type = (*) Term0 ["fn"]
    //   Type = (*) Term0 [r#"--[^\\n]*\\n"#]
    //   Type = (*) Type "->" Type0 [EOF]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 ["data"]
    //   Type = (*) Type "->" Type0 ["extern"]
    //   Type = (*) Type "->" Type0 ["fn"]
    //   Type = (*) Type "->" Type0 [r#"--[^\\n]*\\n"#]
    //   Type = (*) "Type" [EOF]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" ["data"]
    //   Type = (*) "Type" ["extern"]
    //   Type = (*) "Type" ["fn"]
    //   Type = (*) "Type" [r#"--[^\\n]*\\n"#]
    //
    //   "(" -> Shift(S39)
    //   "Type" -> Shift(S40)
    //   "match" -> Shift(S41)
    //   r#"[1-9][0-9]+"# -> Shift(S42)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S43)
    //   r#"\\(\\)"# -> Shift(S44)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S45)
    //
    //   Literal -> S34
    //   Match -> S35
    //   Name -> S36
    //   Term0 -> S37
    //   Type -> S38
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 27
    //   Arg+ = Arg (*) ["("]
    //   Arg+ = Arg (*) [":"]
    //
    //   "(" -> Reduce(Arg+ = Arg => ActionFn(42);)
    //   ":" -> Reduce(Arg+ = Arg => ActionFn(42);)
    //
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Name, Term)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action42(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arg_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 28
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = Arg+ (*) Arg ["("]
    //   Arg+ = Arg+ (*) Arg [":"]
    //   Fn = "fn" Name Arg+ (*) ":" Type ":=" Term "end" [EOF]
    //   Fn = "fn" Name Arg+ (*) ":" Type ":=" Term "end" ["data"]
    //   Fn = "fn" Name Arg+ (*) ":" Type ":=" Term "end" ["extern"]
    //   Fn = "fn" Name Arg+ (*) ":" Type ":=" Term "end" ["fn"]
    //   Fn = "fn" Name Arg+ (*) ":" Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //
    //   "(" -> Shift(S29)
    //   ":" -> Shift(S47)
    //
    //   Arg -> S46
    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 29
    //   Arg = "(" (*) Name ":" Type ")" ["("]
    //   Arg = "(" (*) Name ":" Type ")" [":"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":"]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S19)
    //
    //   Name -> S48
    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 30
    //   Fn = "fn" Name ":" (*) Type ":=" Term "end" [EOF]
    //   Fn = "fn" Name ":" (*) Type ":=" Term "end" ["data"]
    //   Fn = "fn" Name ":" (*) Type ":=" Term "end" ["extern"]
    //   Fn = "fn" Name ":" (*) Type ":=" Term "end" ["fn"]
    //   Fn = "fn" Name ":" (*) Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# [":="]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [":="]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [":="]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [":="]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":="]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal [":="]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match [":="]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name [":="]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" [":="]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [":="]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 [":="]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 [":="]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" [":="]
    //
    //   "(" -> Shift(S54)
    //   "Type" -> Shift(S55)
    //   "match" -> Shift(S56)
    //   r#"[1-9][0-9]+"# -> Shift(S57)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S58)
    //   r#"\\(\\)"# -> Shift(S59)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S60)
    //
    //   Literal -> S49
    //   Match -> S50
    //   Name -> S51
    //   Term0 -> S52
    //   Type -> S53
    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 31
    //   (<Constructor>)+ = (<Constructor>)+ Constructor (*) ["end"]
    //   (<Constructor>)+ = (<Constructor>)+ Constructor (*) ["|"]
    //
    //   "end" -> Reduce((<Constructor>)+ = (<Constructor>)+, Constructor => ActionFn(62);)
    //   "|" -> Reduce((<Constructor>)+ = (<Constructor>)+, Constructor => ActionFn(62);)
    //
    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym1: &mut Option<(Name, Term)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action62(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::_28_3cConstructor_3e_29_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 32
    //   Data = "data" Name (<Constructor>)+ "end" (*) [EOF]
    //   Data = "data" Name (<Constructor>)+ "end" (*) ["data"]
    //   Data = "data" Name (<Constructor>)+ "end" (*) ["extern"]
    //   Data = "data" Name (<Constructor>)+ "end" (*) ["fn"]
    //   Data = "data" Name (<Constructor>)+ "end" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Data = "data", Name, (<Constructor>)+, "end" => ActionFn(64);)
    //   "data" -> Reduce(Data = "data", Name, (<Constructor>)+, "end" => ActionFn(64);)
    //   "extern" -> Reduce(Data = "data", Name, (<Constructor>)+, "end" => ActionFn(64);)
    //   "fn" -> Reduce(Data = "data", Name, (<Constructor>)+, "end" => ActionFn(64);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Data = "data", Name, (<Constructor>)+, "end" => ActionFn(64);)
    //
    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action64(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Data(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 33
    //   Constructor = "|" Name (*) ":" Type ["end"]
    //   Constructor = "|" Name (*) ":" Type ["|"]
    //
    //   ":" -> Shift(S61)
    //
    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 34
    //   Term0 = Literal (*) [EOF]
    //   Term0 = Literal (*) ["->"]
    //   Term0 = Literal (*) ["data"]
    //   Term0 = Literal (*) ["extern"]
    //   Term0 = Literal (*) ["fn"]
    //   Term0 = Literal (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "->" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "data" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "extern" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "fn" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 35
    //   Term0 = Match (*) [EOF]
    //   Term0 = Match (*) ["->"]
    //   Term0 = Match (*) ["data"]
    //   Term0 = Match (*) ["extern"]
    //   Term0 = Match (*) ["fn"]
    //   Term0 = Match (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Term0 = Match => ActionFn(17);)
    //   "->" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "data" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "extern" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "fn" -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 36
    //   Term0 = Name (*) [EOF]
    //   Term0 = Name (*) ["->"]
    //   Term0 = Name (*) ["data"]
    //   Term0 = Name (*) ["extern"]
    //   Term0 = Name (*) ["fn"]
    //   Term0 = Name (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Term0 = Name => ActionFn(15);)
    //   "->" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "data" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "extern" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "fn" -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 37
    //   Type = Term0 (*) [EOF]
    //   Type = Term0 (*) ["->"]
    //   Type = Term0 (*) ["data"]
    //   Type = Term0 (*) ["extern"]
    //   Type = Term0 (*) ["fn"]
    //   Type = Term0 (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Type = Term0 => ActionFn(28);)
    //   "->" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "data" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "extern" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "fn" -> Reduce(Type = Term0 => ActionFn(28);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Type = Term0 => ActionFn(28);)
    //
    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 38
    //   Extern = "extern" Name ":" Type (*) [EOF]
    //   Extern = "extern" Name ":" Type (*) ["data"]
    //   Extern = "extern" Name ":" Type (*) ["extern"]
    //   Extern = "extern" Name ":" Type (*) ["fn"]
    //   Extern = "extern" Name ":" Type (*) [r#"--[^\\n]*\\n"#]
    //   Type = Type (*) "->" Type0 [EOF]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 ["data"]
    //   Type = Type (*) "->" Type0 ["extern"]
    //   Type = Type (*) "->" Type0 ["fn"]
    //   Type = Type (*) "->" Type0 [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Extern = "extern", Name, ":", Type => ActionFn(10);)
    //   "->" -> Shift(S62)
    //   "data" -> Reduce(Extern = "extern", Name, ":", Type => ActionFn(10);)
    //   "extern" -> Reduce(Extern = "extern", Name, ":", Type => ActionFn(10);)
    //   "fn" -> Reduce(Extern = "extern", Name, ":", Type => ActionFn(10);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Extern = "extern", Name, ":", Type => ActionFn(10);)
    //
    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action10(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Extern(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 39
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" [EOF]
    //   Term0 = "(" (*) Term ")" ["->"]
    //   Term0 = "(" (*) Term ")" ["data"]
    //   Term0 = "(" (*) Term ")" ["extern"]
    //   Term0 = "(" (*) Term ")" ["fn"]
    //   Term0 = "(" (*) Term ")" [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S66
    //   Term0 -> S67
    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 40
    //   Type = "Type" (*) [EOF]
    //   Type = "Type" (*) ["->"]
    //   Type = "Type" (*) ["data"]
    //   Type = "Type" (*) ["extern"]
    //   Type = "Type" (*) ["fn"]
    //   Type = "Type" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Type = "Type" => ActionFn(26);)
    //   "->" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "data" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "extern" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "fn" -> Reduce(Type = "Type" => ActionFn(26);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Type = "Type" => ActionFn(26);)
    //
    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action26(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 41
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [EOF]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["->"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["data"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["extern"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["fn"]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"--[^\\n]*\\n"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" [EOF]
    //   Match = "match" (*) Term "with" "end" ["->"]
    //   Match = "match" (*) Term "with" "end" ["data"]
    //   Match = "match" (*) Term "with" "end" ["extern"]
    //   Match = "match" (*) Term "with" "end" ["fn"]
    //   Match = "match" (*) Term "with" "end" [r#"--[^\\n]*\\n"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S78
    //   Term0 -> S79
    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 42
    //   Literal = r#"[1-9][0-9]+"# (*) [EOF]
    //   Literal = r#"[1-9][0-9]+"# (*) ["->"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["data"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["extern"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["fn"]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "->" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "data" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "extern" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "fn" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 43
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [EOF]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["data"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["extern"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["fn"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "->" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "data" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "extern" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "fn" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 44
    //   Literal = r#"\\(\\)"# (*) [EOF]
    //   Literal = r#"\\(\\)"# (*) ["->"]
    //   Literal = r#"\\(\\)"# (*) ["data"]
    //   Literal = r#"\\(\\)"# (*) ["extern"]
    //   Literal = r#"\\(\\)"# (*) ["fn"]
    //   Literal = r#"\\(\\)"# (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "->" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "data" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "extern" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "fn" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 45
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [EOF]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["data"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["extern"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["fn"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "->" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "data" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "extern" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "fn" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 46
    //   Arg+ = Arg+ Arg (*) ["("]
    //   Arg+ = Arg+ Arg (*) [":"]
    //
    //   "(" -> Reduce(Arg+ = Arg+, Arg => ActionFn(43);)
    //   ":" -> Reduce(Arg+ = Arg+, Arg => ActionFn(43);)
    //
    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym1: &mut Option<(Name, Term)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arg_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 47
    //   Fn = "fn" Name Arg+ ":" (*) Type ":=" Term "end" [EOF]
    //   Fn = "fn" Name Arg+ ":" (*) Type ":=" Term "end" ["data"]
    //   Fn = "fn" Name Arg+ ":" (*) Type ":=" Term "end" ["extern"]
    //   Fn = "fn" Name Arg+ ":" (*) Type ":=" Term "end" ["fn"]
    //   Fn = "fn" Name Arg+ ":" (*) Type ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# [":="]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [":="]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [":="]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [":="]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":="]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal [":="]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match [":="]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name [":="]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" [":="]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [":="]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 [":="]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 [":="]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" [":="]
    //
    //   "(" -> Shift(S54)
    //   "Type" -> Shift(S55)
    //   "match" -> Shift(S56)
    //   r#"[1-9][0-9]+"# -> Shift(S57)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S58)
    //   r#"\\(\\)"# -> Shift(S59)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S60)
    //
    //   Literal -> S49
    //   Match -> S50
    //   Name -> S51
    //   Term0 -> S52
    //   Type -> S87
    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state87(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 48
    //   Arg = "(" Name (*) ":" Type ")" ["("]
    //   Arg = "(" Name (*) ":" Type ")" [":"]
    //
    //   ":" -> Shift(S88)
    //
    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 49
    //   Term0 = Literal (*) ["->"]
    //   Term0 = Literal (*) [":="]
    //
    //   "->" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   ":=" -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 50
    //   Term0 = Match (*) ["->"]
    //   Term0 = Match (*) [":="]
    //
    //   "->" -> Reduce(Term0 = Match => ActionFn(17);)
    //   ":=" -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 51
    //   Term0 = Name (*) ["->"]
    //   Term0 = Name (*) [":="]
    //
    //   "->" -> Reduce(Term0 = Name => ActionFn(15);)
    //   ":=" -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 52
    //   Type = Term0 (*) ["->"]
    //   Type = Term0 (*) [":="]
    //
    //   "->" -> Reduce(Type = Term0 => ActionFn(28);)
    //   ":=" -> Reduce(Type = Term0 => ActionFn(28);)
    //
    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 53
    //   Fn = "fn" Name ":" Type (*) ":=" Term "end" [EOF]
    //   Fn = "fn" Name ":" Type (*) ":=" Term "end" ["data"]
    //   Fn = "fn" Name ":" Type (*) ":=" Term "end" ["extern"]
    //   Fn = "fn" Name ":" Type (*) ":=" Term "end" ["fn"]
    //   Fn = "fn" Name ":" Type (*) ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 [":="]
    //
    //   "->" -> Shift(S89)
    //   ":=" -> Shift(S90)
    //
    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 54
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["->"]
    //   Term0 = "(" (*) Term ")" [":="]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S91
    //   Term0 -> S67
    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 55
    //   Type = "Type" (*) ["->"]
    //   Type = "Type" (*) [":="]
    //
    //   "->" -> Reduce(Type = "Type" => ActionFn(26);)
    //   ":=" -> Reduce(Type = "Type" => ActionFn(26);)
    //
    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action26(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 56
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["->"]
    //   Match = "match" (*) Term "with" (Case)+ "end" [":="]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["->"]
    //   Match = "match" (*) Term "with" "end" [":="]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S92
    //   Term0 -> S79
    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 57
    //   Literal = r#"[1-9][0-9]+"# (*) ["->"]
    //   Literal = r#"[1-9][0-9]+"# (*) [":="]
    //
    //   "->" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   ":=" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 58
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [":="]
    //
    //   "->" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   ":=" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 59
    //   Literal = r#"\\(\\)"# (*) ["->"]
    //   Literal = r#"\\(\\)"# (*) [":="]
    //
    //   "->" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   ":=" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 60
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [":="]
    //
    //   "->" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   ":=" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 61
    //   Constructor = "|" Name ":" (*) Type ["end"]
    //   Constructor = "|" Name ":" (*) Type ["|"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["|"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["|"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["|"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["|"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["|"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["|"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["|"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 ["end"]
    //   Type = (*) Term0 ["|"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 ["end"]
    //   Type = (*) Type "->" Type0 ["|"]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" ["end"]
    //   Type = (*) "Type" ["|"]
    //
    //   "(" -> Shift(S98)
    //   "Type" -> Shift(S99)
    //   "match" -> Shift(S100)
    //   r#"[1-9][0-9]+"# -> Shift(S101)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S102)
    //   r#"\\(\\)"# -> Shift(S103)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S104)
    //
    //   Literal -> S93
    //   Match -> S94
    //   Name -> S95
    //   Term0 -> S96
    //   Type -> S97
    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state98(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state99(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state100(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state101(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state102(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state103(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state104(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state93(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state94(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state95(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state96(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state97(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 62
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [EOF]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["data"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["extern"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["fn"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"--[^\\n]*\\n"#]
    //   Type = Type "->" (*) Type0 [EOF]
    //   Type = Type "->" (*) Type0 ["->"]
    //   Type = Type "->" (*) Type0 ["data"]
    //   Type = Type "->" (*) Type0 ["extern"]
    //   Type = Type "->" (*) Type0 ["fn"]
    //   Type = Type "->" (*) Type0 [r#"--[^\\n]*\\n"#]
    //   Type0 = (*) Name [EOF]
    //   Type0 = (*) Name ["->"]
    //   Type0 = (*) Name ["data"]
    //   Type0 = (*) Name ["extern"]
    //   Type0 = (*) Name ["fn"]
    //   Type0 = (*) Name [r#"--[^\\n]*\\n"#]
    //   Type0 = (*) "(" Type ")" [EOF]
    //   Type0 = (*) "(" Type ")" ["->"]
    //   Type0 = (*) "(" Type ")" ["data"]
    //   Type0 = (*) "(" Type ")" ["extern"]
    //   Type0 = (*) "(" Type ")" ["fn"]
    //   Type0 = (*) "(" Type ")" [r#"--[^\\n]*\\n"#]
    //   Type0 = (*) "Type" [EOF]
    //   Type0 = (*) "Type" ["->"]
    //   Type0 = (*) "Type" ["data"]
    //   Type0 = (*) "Type" ["extern"]
    //   Type0 = (*) "Type" ["fn"]
    //   Type0 = (*) "Type" [r#"--[^\\n]*\\n"#]
    //
    //   "(" -> Shift(S107)
    //   "Type" -> Shift(S108)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S43)
    //
    //   Name -> S105
    //   Type0 -> S106
    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state107(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Type0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state106(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 63
    //   Term0 = Literal (*) ["("]
    //   Term0 = Literal (*) [")"]
    //   Term0 = Literal (*) ["match"]
    //   Term0 = Literal (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Literal (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Literal (*) [r#"\\(\\)"#]
    //   Term0 = Literal (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   ")" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "match" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 64
    //   Term0 = Match (*) ["("]
    //   Term0 = Match (*) [")"]
    //   Term0 = Match (*) ["match"]
    //   Term0 = Match (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Match (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Match (*) [r#"\\(\\)"#]
    //   Term0 = Match (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Match => ActionFn(17);)
    //   ")" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "match" -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 65
    //   Term0 = Name (*) ["("]
    //   Term0 = Name (*) [")"]
    //   Term0 = Name (*) ["match"]
    //   Term0 = Name (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Name (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Name (*) [r#"\\(\\)"#]
    //   Term0 = Name (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Name => ActionFn(15);)
    //   ")" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "match" -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 66
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" [EOF]
    //   Term0 = "(" Term (*) ")" ["->"]
    //   Term0 = "(" Term (*) ")" ["data"]
    //   Term0 = "(" Term (*) ")" ["extern"]
    //   Term0 = "(" Term (*) ")" ["fn"]
    //   Term0 = "(" Term (*) ")" [r#"--[^\\n]*\\n"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S110)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 67
    //   Term = Term0 (*) ["("]
    //   Term = Term0 (*) [")"]
    //   Term = Term0 (*) ["match"]
    //   Term = Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term0 (*) [r#"\\(\\)"#]
    //   Term = Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term0 => ActionFn(14);)
    //   ")" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "match" -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\(\\)"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //
    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 68
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["("]
    //   Term0 = "(" (*) Term ")" [")"]
    //   Term0 = "(" (*) Term ")" ["match"]
    //   Term0 = "(" (*) Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" (*) Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" [r#"\\(\\)"#]
    //   Term0 = "(" (*) Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S111
    //   Term0 -> S67
    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state111(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 69
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = (*) Arg ["("]
    //   Arg+ = (*) Arg [":"]
    //   Arg+ = (*) Arg+ Arg ["("]
    //   Arg+ = (*) Arg+ Arg [":"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["("]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [")"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //
    //   Arg -> S27
    //   Arg+ -> S112
    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arg_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 70
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["("]
    //   Match = "match" (*) Term "with" (Case)+ "end" [")"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["match"]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["("]
    //   Match = "match" (*) Term "with" "end" [")"]
    //   Match = "match" (*) Term "with" "end" ["match"]
    //   Match = "match" (*) Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S113
    //   Term0 -> S79
    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 71
    //   Literal = r#"[1-9][0-9]+"# (*) ["("]
    //   Literal = r#"[1-9][0-9]+"# (*) [")"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["match"]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\(\\)"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   ")" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "match" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 72
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [")"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   ")" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "match" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[1-9][0-9]+"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\(\\)"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 73
    //   Literal = r#"\\(\\)"# (*) ["("]
    //   Literal = r#"\\(\\)"# (*) [")"]
    //   Literal = r#"\\(\\)"# (*) ["match"]
    //   Literal = r#"\\(\\)"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"\\(\\)"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\(\\)"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   ")" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "match" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 74
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [")"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   ")" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "match" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\(\\)"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 75
    //   Term0 = Literal (*) ["("]
    //   Term0 = Literal (*) ["match"]
    //   Term0 = Literal (*) ["with"]
    //   Term0 = Literal (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Literal (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Literal (*) [r#"\\(\\)"#]
    //   Term0 = Literal (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "match" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "with" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 76
    //   Term0 = Match (*) ["("]
    //   Term0 = Match (*) ["match"]
    //   Term0 = Match (*) ["with"]
    //   Term0 = Match (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Match (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Match (*) [r#"\\(\\)"#]
    //   Term0 = Match (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "match" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "with" -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 77
    //   Term0 = Name (*) ["("]
    //   Term0 = Name (*) ["match"]
    //   Term0 = Name (*) ["with"]
    //   Term0 = Name (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Name (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Name (*) [r#"\\(\\)"#]
    //   Term0 = Name (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "match" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "with" -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 78
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [EOF]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["->"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["data"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["extern"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["fn"]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"--[^\\n]*\\n"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" [EOF]
    //   Match = "match" Term (*) "with" "end" ["->"]
    //   Match = "match" Term (*) "with" "end" ["data"]
    //   Match = "match" Term (*) "with" "end" ["extern"]
    //   Match = "match" Term (*) "with" "end" ["fn"]
    //   Match = "match" Term (*) "with" "end" [r#"--[^\\n]*\\n"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S115)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 79
    //   Term = Term0 (*) ["("]
    //   Term = Term0 (*) ["match"]
    //   Term = Term0 (*) ["with"]
    //   Term = Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term0 (*) [r#"\\(\\)"#]
    //   Term = Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "match" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "with" -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\(\\)"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //
    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 80
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["("]
    //   Term0 = "(" (*) Term ")" ["match"]
    //   Term0 = "(" (*) Term ")" ["with"]
    //   Term0 = "(" (*) Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" (*) Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" [r#"\\(\\)"#]
    //   Term0 = "(" (*) Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S116
    //   Term0 -> S67
    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 81
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = (*) Arg ["("]
    //   Arg+ = (*) Arg [":"]
    //   Arg+ = (*) Arg+ Arg ["("]
    //   Arg+ = (*) Arg+ Arg [":"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["("]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //
    //   Arg -> S27
    //   Arg+ -> S117
    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arg_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 82
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["("]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["match"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["with"]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["("]
    //   Match = "match" (*) Term "with" "end" ["match"]
    //   Match = "match" (*) Term "with" "end" ["with"]
    //   Match = "match" (*) Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S118
    //   Term0 -> S79
    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 83
    //   Literal = r#"[1-9][0-9]+"# (*) ["("]
    //   Literal = r#"[1-9][0-9]+"# (*) ["match"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["with"]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\(\\)"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "match" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "with" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 84
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["with"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "match" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "with" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[1-9][0-9]+"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\(\\)"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 85
    //   Literal = r#"\\(\\)"# (*) ["("]
    //   Literal = r#"\\(\\)"# (*) ["match"]
    //   Literal = r#"\\(\\)"# (*) ["with"]
    //   Literal = r#"\\(\\)"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"\\(\\)"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\(\\)"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "match" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "with" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 86
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["with"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "match" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "with" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\(\\)"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 87
    //   Fn = "fn" Name Arg+ ":" Type (*) ":=" Term "end" [EOF]
    //   Fn = "fn" Name Arg+ ":" Type (*) ":=" Term "end" ["data"]
    //   Fn = "fn" Name Arg+ ":" Type (*) ":=" Term "end" ["extern"]
    //   Fn = "fn" Name Arg+ ":" Type (*) ":=" Term "end" ["fn"]
    //   Fn = "fn" Name Arg+ ":" Type (*) ":=" Term "end" [r#"--[^\\n]*\\n"#]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 [":="]
    //
    //   "->" -> Shift(S89)
    //   ":=" -> Shift(S119)
    //
    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym4, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state119(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 88
    //   Arg = "(" Name ":" (*) Type ")" ["("]
    //   Arg = "(" Name ":" (*) Type ")" [":"]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = (*) Term0 [")"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Type "->" Type0 [")"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) "Type" [")"]
    //   Type = (*) "Type" ["->"]
    //
    //   "(" -> Shift(S125)
    //   "Type" -> Shift(S126)
    //   "match" -> Shift(S127)
    //   r#"[1-9][0-9]+"# -> Shift(S128)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //   r#"\\(\\)"# -> Shift(S130)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S131)
    //
    //   Literal -> S120
    //   Match -> S121
    //   Name -> S122
    //   Term0 -> S123
    //   Type -> S124
    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 89
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [":="]
    //   Type = Type "->" (*) Type0 ["->"]
    //   Type = Type "->" (*) Type0 [":="]
    //   Type0 = (*) Name ["->"]
    //   Type0 = (*) Name [":="]
    //   Type0 = (*) "(" Type ")" ["->"]
    //   Type0 = (*) "(" Type ")" [":="]
    //   Type0 = (*) "Type" ["->"]
    //   Type0 = (*) "Type" [":="]
    //
    //   "(" -> Shift(S134)
    //   "Type" -> Shift(S135)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S58)
    //
    //   Name -> S132
    //   Type0 -> S133
    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state132(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Type0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state133(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 90
    //   Fn = "fn" Name ":" Type ":=" (*) Term "end" [EOF]
    //   Fn = "fn" Name ":" Type ":=" (*) Term "end" ["data"]
    //   Fn = "fn" Name ":" Type ":=" (*) Term "end" ["extern"]
    //   Fn = "fn" Name ":" Type ":=" (*) Term "end" ["fn"]
    //   Fn = "fn" Name ":" Type ":=" (*) Term "end" [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["end"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["end"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["end"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S141)
    //   "fun" -> Shift(S142)
    //   "match" -> Shift(S143)
    //   r#"[1-9][0-9]+"# -> Shift(S144)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S145)
    //   r#"\\(\\)"# -> Shift(S146)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S147)
    //
    //   Literal -> S136
    //   Match -> S137
    //   Name -> S138
    //   Term -> S139
    //   Term0 -> S140
    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state141(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state142(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state136(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state139(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state140(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 91
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["->"]
    //   Term0 = "(" Term (*) ")" [":="]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S148)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state148(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 92
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["->"]
    //   Match = "match" Term (*) "with" (Case)+ "end" [":="]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["->"]
    //   Match = "match" Term (*) "with" "end" [":="]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S149)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state149(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 93
    //   Term0 = Literal (*) ["->"]
    //   Term0 = Literal (*) ["end"]
    //   Term0 = Literal (*) ["|"]
    //
    //   "->" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "end" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "|" -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 94
    //   Term0 = Match (*) ["->"]
    //   Term0 = Match (*) ["end"]
    //   Term0 = Match (*) ["|"]
    //
    //   "->" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "end" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "|" -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 95
    //   Term0 = Name (*) ["->"]
    //   Term0 = Name (*) ["end"]
    //   Term0 = Name (*) ["|"]
    //
    //   "->" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "end" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "|" -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 96
    //   Type = Term0 (*) ["->"]
    //   Type = Term0 (*) ["end"]
    //   Type = Term0 (*) ["|"]
    //
    //   "->" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "end" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "|" -> Reduce(Type = Term0 => ActionFn(28);)
    //
    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 97
    //   Constructor = "|" Name ":" Type (*) ["end"]
    //   Constructor = "|" Name ":" Type (*) ["|"]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 ["end"]
    //   Type = Type (*) "->" Type0 ["|"]
    //
    //   "->" -> Shift(S150)
    //   "end" -> Reduce(Constructor = "|", Name, ":", Type => ActionFn(7);)
    //   "|" -> Reduce(Constructor = "|", Name, ":", Type => ActionFn(7);)
    //
    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state150(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action7(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Constructor(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 98
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["->"]
    //   Term0 = "(" (*) Term ")" ["end"]
    //   Term0 = "(" (*) Term ")" ["|"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S151
    //   Term0 -> S67
    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state151(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 99
    //   Type = "Type" (*) ["->"]
    //   Type = "Type" (*) ["end"]
    //   Type = "Type" (*) ["|"]
    //
    //   "->" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "end" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "|" -> Reduce(Type = "Type" => ActionFn(26);)
    //
    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action26(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 100
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["->"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["end"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["|"]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["->"]
    //   Match = "match" (*) Term "with" "end" ["end"]
    //   Match = "match" (*) Term "with" "end" ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S152
    //   Term0 -> S79
    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state152(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 101
    //   Literal = r#"[1-9][0-9]+"# (*) ["->"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["end"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["|"]
    //
    //   "->" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "end" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "|" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state101<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 102
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "->" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "end" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "|" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state102<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 103
    //   Literal = r#"\\(\\)"# (*) ["->"]
    //   Literal = r#"\\(\\)"# (*) ["end"]
    //   Literal = r#"\\(\\)"# (*) ["|"]
    //
    //   "->" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "end" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "|" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state103<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 104
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["|"]
    //
    //   "->" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "end" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "|" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state104<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 105
    //   Type0 = Name (*) [EOF]
    //   Type0 = Name (*) ["->"]
    //   Type0 = Name (*) ["data"]
    //   Type0 = Name (*) ["extern"]
    //   Type0 = Name (*) ["fn"]
    //   Type0 = Name (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Type0 = Name => ActionFn(30);)
    //   "->" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "data" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "extern" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "fn" -> Reduce(Type0 = Name => ActionFn(30);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Type0 = Name => ActionFn(30);)
    //
    pub fn __state105<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 106
    //   Type = Type "->" Type0 (*) [EOF]
    //   Type = Type "->" Type0 (*) ["->"]
    //   Type = Type "->" Type0 (*) ["data"]
    //   Type = Type "->" Type0 (*) ["extern"]
    //   Type = Type "->" Type0 (*) ["fn"]
    //   Type = Type "->" Type0 (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "->" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "data" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "extern" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "fn" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //
    pub fn __state106<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 107
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = (*) Term0 [")"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Type "->" Type0 [")"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) "Type" [")"]
    //   Type = (*) "Type" ["->"]
    //   Type0 = "(" (*) Type ")" [EOF]
    //   Type0 = "(" (*) Type ")" ["->"]
    //   Type0 = "(" (*) Type ")" ["data"]
    //   Type0 = "(" (*) Type ")" ["extern"]
    //   Type0 = "(" (*) Type ")" ["fn"]
    //   Type0 = "(" (*) Type ")" [r#"--[^\\n]*\\n"#]
    //
    //   "(" -> Shift(S125)
    //   "Type" -> Shift(S126)
    //   "match" -> Shift(S127)
    //   r#"[1-9][0-9]+"# -> Shift(S128)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //   r#"\\(\\)"# -> Shift(S130)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S131)
    //
    //   Literal -> S120
    //   Match -> S121
    //   Name -> S122
    //   Term0 -> S123
    //   Type -> S153
    pub fn __state107<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state153(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 108
    //   Type0 = "Type" (*) [EOF]
    //   Type0 = "Type" (*) ["->"]
    //   Type0 = "Type" (*) ["data"]
    //   Type0 = "Type" (*) ["extern"]
    //   Type0 = "Type" (*) ["fn"]
    //   Type0 = "Type" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "->" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "data" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "extern" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "fn" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Type0 = "Type" => ActionFn(29);)
    //
    pub fn __state108<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 109
    //   Term = Term Term0 (*) ["("]
    //   Term = Term Term0 (*) [")"]
    //   Term = Term Term0 (*) ["match"]
    //   Term = Term Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term Term0 (*) [r#"\\(\\)"#]
    //   Term = Term Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   ")" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "match" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\(\\)"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //
    pub fn __state109<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action13(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 110
    //   Term0 = "(" Term ")" (*) [EOF]
    //   Term0 = "(" Term ")" (*) ["->"]
    //   Term0 = "(" Term ")" (*) ["data"]
    //   Term0 = "(" Term ")" (*) ["extern"]
    //   Term0 = "(" Term ")" (*) ["fn"]
    //   Term0 = "(" Term ")" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "->" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "data" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "extern" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "fn" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state110<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 111
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["("]
    //   Term0 = "(" Term (*) ")" [")"]
    //   Term0 = "(" Term (*) ")" ["match"]
    //   Term0 = "(" Term (*) ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term (*) ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" [r#"\\(\\)"#]
    //   Term0 = "(" Term (*) ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S154)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state111<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state154(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 112
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = Arg+ (*) Arg ["("]
    //   Arg+ = Arg+ (*) Arg [":"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [")"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //   ":" -> Shift(S155)
    //
    //   Arg -> S46
    pub fn __state112<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state155(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 113
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["("]
    //   Match = "match" Term (*) "with" (Case)+ "end" [")"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["match"]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["("]
    //   Match = "match" Term (*) "with" "end" [")"]
    //   Match = "match" Term (*) "with" "end" ["match"]
    //   Match = "match" Term (*) "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S156)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state113<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state156(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 114
    //   Term = Term Term0 (*) ["("]
    //   Term = Term Term0 (*) ["match"]
    //   Term = Term Term0 (*) ["with"]
    //   Term = Term Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term Term0 (*) [r#"\\(\\)"#]
    //   Term = Term Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "match" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "with" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\(\\)"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //
    pub fn __state114<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action13(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 115
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [EOF]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["->"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["data"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["extern"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["fn"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"--[^\\n]*\\n"#]
    //   Match = "match" Term "with" (*) "end" [EOF]
    //   Match = "match" Term "with" (*) "end" ["->"]
    //   Match = "match" Term "with" (*) "end" ["data"]
    //   Match = "match" Term "with" (*) "end" ["extern"]
    //   Match = "match" Term "with" (*) "end" ["fn"]
    //   Match = "match" Term "with" (*) "end" [r#"--[^\\n]*\\n"#]
    //
    //   "end" -> Shift(S159)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S157
    //   Case -> S158
    pub fn __state115<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state159(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state157(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 116
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["("]
    //   Term0 = "(" Term (*) ")" ["match"]
    //   Term0 = "(" Term (*) ")" ["with"]
    //   Term0 = "(" Term (*) ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term (*) ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" [r#"\\(\\)"#]
    //   Term0 = "(" Term (*) ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S161)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state116<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state161(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 117
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = Arg+ (*) Arg ["("]
    //   Arg+ = Arg+ (*) Arg [":"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["with"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //   ":" -> Shift(S162)
    //
    //   Arg -> S46
    pub fn __state117<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 118
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["("]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["match"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["with"]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["("]
    //   Match = "match" Term (*) "with" "end" ["match"]
    //   Match = "match" Term (*) "with" "end" ["with"]
    //   Match = "match" Term (*) "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S163)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state118<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 119
    //   Fn = "fn" Name Arg+ ":" Type ":=" (*) Term "end" [EOF]
    //   Fn = "fn" Name Arg+ ":" Type ":=" (*) Term "end" ["data"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" (*) Term "end" ["extern"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" (*) Term "end" ["fn"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" (*) Term "end" [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["end"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["end"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["end"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S141)
    //   "fun" -> Shift(S142)
    //   "match" -> Shift(S143)
    //   r#"[1-9][0-9]+"# -> Shift(S144)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S145)
    //   r#"\\(\\)"# -> Shift(S146)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S147)
    //
    //   Literal -> S136
    //   Match -> S137
    //   Name -> S138
    //   Term -> S164
    //   Term0 -> S140
    pub fn __state119<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<Term>,
        __sym5: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state141(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state142(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state136(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state164(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state140(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 120
    //   Term0 = Literal (*) [")"]
    //   Term0 = Literal (*) ["->"]
    //
    //   ")" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "->" -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state120<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 121
    //   Term0 = Match (*) [")"]
    //   Term0 = Match (*) ["->"]
    //
    //   ")" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "->" -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state121<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 122
    //   Term0 = Name (*) [")"]
    //   Term0 = Name (*) ["->"]
    //
    //   ")" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "->" -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state122<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 123
    //   Type = Term0 (*) [")"]
    //   Type = Term0 (*) ["->"]
    //
    //   ")" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "->" -> Reduce(Type = Term0 => ActionFn(28);)
    //
    pub fn __state123<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 124
    //   Arg = "(" Name ":" Type (*) ")" ["("]
    //   Arg = "(" Name ":" Type (*) ")" [":"]
    //   Type = Type (*) "->" Type0 [")"]
    //   Type = Type (*) "->" Type0 ["->"]
    //
    //   ")" -> Shift(S165)
    //   "->" -> Shift(S166)
    //
    pub fn __state124<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state165(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 125
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" [")"]
    //   Term0 = "(" (*) Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S167
    //   Term0 -> S67
    pub fn __state125<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state167(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 126
    //   Type = "Type" (*) [")"]
    //   Type = "Type" (*) ["->"]
    //
    //   ")" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "->" -> Reduce(Type = "Type" => ActionFn(26);)
    //
    pub fn __state126<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action26(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 127
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [")"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" [")"]
    //   Match = "match" (*) Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S168
    //   Term0 -> S79
    pub fn __state127<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 128
    //   Literal = r#"[1-9][0-9]+"# (*) [")"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["->"]
    //
    //   ")" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "->" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state128<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 129
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [")"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //
    //   ")" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "->" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state129<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 130
    //   Literal = r#"\\(\\)"# (*) [")"]
    //   Literal = r#"\\(\\)"# (*) ["->"]
    //
    //   ")" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "->" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state130<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 131
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [")"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //
    //   ")" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "->" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state131<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 132
    //   Type0 = Name (*) ["->"]
    //   Type0 = Name (*) [":="]
    //
    //   "->" -> Reduce(Type0 = Name => ActionFn(30);)
    //   ":=" -> Reduce(Type0 = Name => ActionFn(30);)
    //
    pub fn __state132<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 133
    //   Type = Type "->" Type0 (*) ["->"]
    //   Type = Type "->" Type0 (*) [":="]
    //
    //   "->" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   ":=" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //
    pub fn __state133<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 134
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = (*) Term0 [")"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Type "->" Type0 [")"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) "Type" [")"]
    //   Type = (*) "Type" ["->"]
    //   Type0 = "(" (*) Type ")" ["->"]
    //   Type0 = "(" (*) Type ")" [":="]
    //
    //   "(" -> Shift(S125)
    //   "Type" -> Shift(S126)
    //   "match" -> Shift(S127)
    //   r#"[1-9][0-9]+"# -> Shift(S128)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //   r#"\\(\\)"# -> Shift(S130)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S131)
    //
    //   Literal -> S120
    //   Match -> S121
    //   Name -> S122
    //   Term0 -> S123
    //   Type -> S169
    pub fn __state134<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state169(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 135
    //   Type0 = "Type" (*) ["->"]
    //   Type0 = "Type" (*) [":="]
    //
    //   "->" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   ":=" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //
    pub fn __state135<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 136
    //   Term0 = Literal (*) ["("]
    //   Term0 = Literal (*) ["end"]
    //   Term0 = Literal (*) ["match"]
    //   Term0 = Literal (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Literal (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Literal (*) [r#"\\(\\)"#]
    //   Term0 = Literal (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "end" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "match" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state136<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 137
    //   Term0 = Match (*) ["("]
    //   Term0 = Match (*) ["end"]
    //   Term0 = Match (*) ["match"]
    //   Term0 = Match (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Match (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Match (*) [r#"\\(\\)"#]
    //   Term0 = Match (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "end" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "match" -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state137<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 138
    //   Term0 = Name (*) ["("]
    //   Term0 = Name (*) ["end"]
    //   Term0 = Name (*) ["match"]
    //   Term0 = Name (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Name (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Name (*) [r#"\\(\\)"#]
    //   Term0 = Name (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "end" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "match" -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state138<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 139
    //   Fn = "fn" Name ":" Type ":=" Term (*) "end" [EOF]
    //   Fn = "fn" Name ":" Type ":=" Term (*) "end" ["data"]
    //   Fn = "fn" Name ":" Type ":=" Term (*) "end" ["extern"]
    //   Fn = "fn" Name ":" Type ":=" Term (*) "end" ["fn"]
    //   Fn = "fn" Name ":" Type ":=" Term (*) "end" [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["end"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S141)
    //   "end" -> Shift(S171)
    //   "match" -> Shift(S143)
    //   r#"[1-9][0-9]+"# -> Shift(S144)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S145)
    //   r#"\\(\\)"# -> Shift(S146)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S147)
    //
    //   Literal -> S136
    //   Match -> S137
    //   Name -> S138
    //   Term0 -> S170
    pub fn __state139<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state141(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym6));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym5.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state136(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym6));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym6 = &mut Some(__nt);
                    __result = try!(__state170(input, __lookbehind, __tokens, __lookahead, __sym5, __sym6));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 140
    //   Term = Term0 (*) ["("]
    //   Term = Term0 (*) ["end"]
    //   Term = Term0 (*) ["match"]
    //   Term = Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term0 (*) [r#"\\(\\)"#]
    //   Term = Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "end" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "match" -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\(\\)"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //
    pub fn __state140<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 141
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["("]
    //   Term0 = "(" (*) Term ")" ["end"]
    //   Term0 = "(" (*) Term ")" ["match"]
    //   Term0 = "(" (*) Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" (*) Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" [r#"\\(\\)"#]
    //   Term0 = "(" (*) Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S172
    //   Term0 -> S67
    pub fn __state141<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state172(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 142
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = (*) Arg ["("]
    //   Arg+ = (*) Arg [":"]
    //   Arg+ = (*) Arg+ Arg ["("]
    //   Arg+ = (*) Arg+ Arg [":"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["("]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["end"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //
    //   Arg -> S27
    //   Arg+ -> S173
    pub fn __state142<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arg_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state173(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 143
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["("]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["end"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["match"]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["("]
    //   Match = "match" (*) Term "with" "end" ["end"]
    //   Match = "match" (*) Term "with" "end" ["match"]
    //   Match = "match" (*) Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S174
    //   Term0 -> S79
    pub fn __state143<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state174(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 144
    //   Literal = r#"[1-9][0-9]+"# (*) ["("]
    //   Literal = r#"[1-9][0-9]+"# (*) ["end"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["match"]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\(\\)"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "end" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "match" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state144<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 145
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "end" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "match" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[1-9][0-9]+"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\(\\)"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state145<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 146
    //   Literal = r#"\\(\\)"# (*) ["("]
    //   Literal = r#"\\(\\)"# (*) ["end"]
    //   Literal = r#"\\(\\)"# (*) ["match"]
    //   Literal = r#"\\(\\)"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"\\(\\)"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\(\\)"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "end" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "match" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state146<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 147
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "end" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "match" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\(\\)"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state147<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 148
    //   Term0 = "(" Term ")" (*) ["->"]
    //   Term0 = "(" Term ")" (*) [":="]
    //
    //   "->" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   ":=" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state148<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 149
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["->"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [":="]
    //   Match = "match" Term "with" (*) "end" ["->"]
    //   Match = "match" Term "with" (*) "end" [":="]
    //
    //   "end" -> Shift(S176)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S175
    //   Case -> S158
    pub fn __state149<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state176(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state175(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 150
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Type = Type "->" (*) Type0 ["->"]
    //   Type = Type "->" (*) Type0 ["end"]
    //   Type = Type "->" (*) Type0 ["|"]
    //   Type0 = (*) Name ["->"]
    //   Type0 = (*) Name ["end"]
    //   Type0 = (*) Name ["|"]
    //   Type0 = (*) "(" Type ")" ["->"]
    //   Type0 = (*) "(" Type ")" ["end"]
    //   Type0 = (*) "(" Type ")" ["|"]
    //   Type0 = (*) "Type" ["->"]
    //   Type0 = (*) "Type" ["end"]
    //   Type0 = (*) "Type" ["|"]
    //
    //   "(" -> Shift(S179)
    //   "Type" -> Shift(S180)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S102)
    //
    //   Name -> S177
    //   Type0 -> S178
    pub fn __state150<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state179(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state180(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state102(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state177(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Type0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state178(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 151
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["->"]
    //   Term0 = "(" Term (*) ")" ["end"]
    //   Term0 = "(" Term (*) ")" ["|"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S181)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state151<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state181(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 152
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["->"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["end"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["|"]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["->"]
    //   Match = "match" Term (*) "with" "end" ["end"]
    //   Match = "match" Term (*) "with" "end" ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S182)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state152<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state182(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 153
    //   Type = Type (*) "->" Type0 [")"]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type0 = "(" Type (*) ")" [EOF]
    //   Type0 = "(" Type (*) ")" ["->"]
    //   Type0 = "(" Type (*) ")" ["data"]
    //   Type0 = "(" Type (*) ")" ["extern"]
    //   Type0 = "(" Type (*) ")" ["fn"]
    //   Type0 = "(" Type (*) ")" [r#"--[^\\n]*\\n"#]
    //
    //   ")" -> Shift(S183)
    //   "->" -> Shift(S166)
    //
    pub fn __state153<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state183(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 154
    //   Term0 = "(" Term ")" (*) ["("]
    //   Term0 = "(" Term ")" (*) [")"]
    //   Term0 = "(" Term ")" (*) ["match"]
    //   Term0 = "(" Term ")" (*) [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term ")" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term ")" (*) [r#"\\(\\)"#]
    //   Term0 = "(" Term ")" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   ")" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "match" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\(\\)"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state154<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 155
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["=>"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# ["=>"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["=>"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [")"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal ["=>"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match ["=>"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name ["=>"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" ["=>"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 ["=>"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 ["=>"]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" ["=>"]
    //
    //   "(" -> Shift(S189)
    //   "Type" -> Shift(S190)
    //   "match" -> Shift(S191)
    //   r#"[1-9][0-9]+"# -> Shift(S192)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S193)
    //   r#"\\(\\)"# -> Shift(S194)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S195)
    //
    //   Literal -> S184
    //   Match -> S185
    //   Name -> S186
    //   Term0 -> S187
    //   Type -> S188
    pub fn __state155<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state189(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state190(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state191(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state192(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state193(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state194(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state195(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state184(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state185(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state186(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state187(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state188(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 156
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["("]
    //   Match = "match" Term "with" (*) (Case)+ "end" [")"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["match"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" ["("]
    //   Match = "match" Term "with" (*) "end" [")"]
    //   Match = "match" Term "with" (*) "end" ["match"]
    //   Match = "match" Term "with" (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S197)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S196
    //   Case -> S158
    pub fn __state156<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state197(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state196(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 157
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [EOF]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["->"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["data"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["extern"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["fn"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"--[^\\n]*\\n"#]
    //
    //   "end" -> Shift(S199)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state157<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state199(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 158
    //   (Case)+ = Case (*) ["end"]
    //   (Case)+ = Case (*) ["|"]
    //
    //   "end" -> Reduce((Case)+ = Case => ActionFn(70);)
    //   "|" -> Reduce((Case)+ = Case => ActionFn(70);)
    //
    pub fn __state158<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Case>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action70(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::_28Case_29_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 159
    //   Match = "match" Term "with" "end" (*) [EOF]
    //   Match = "match" Term "with" "end" (*) ["->"]
    //   Match = "match" Term "with" "end" (*) ["data"]
    //   Match = "match" Term "with" "end" (*) ["extern"]
    //   Match = "match" Term "with" "end" (*) ["fn"]
    //   Match = "match" Term "with" "end" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "->" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "data" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "extern" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "fn" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state159<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 160
    //   Case = "|" (*) Pattern "=>" Term ["end"]
    //   Case = "|" (*) Pattern "=>" Term ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = (*) Name ["=>"]
    //   Pattern = (*) Name PatternO+ ["=>"]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S202)
    //
    //   Name -> S200
    //   Pattern -> S201
    pub fn __state160<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state200(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Pattern(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state201(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 161
    //   Term0 = "(" Term ")" (*) ["("]
    //   Term0 = "(" Term ")" (*) ["match"]
    //   Term0 = "(" Term ")" (*) ["with"]
    //   Term0 = "(" Term ")" (*) [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term ")" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term ")" (*) [r#"\\(\\)"#]
    //   Term0 = "(" Term ")" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "match" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "with" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\(\\)"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state161<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 162
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["=>"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# ["=>"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["=>"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["with"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal ["=>"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match ["=>"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name ["=>"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" ["=>"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 ["=>"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 ["=>"]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" ["=>"]
    //
    //   "(" -> Shift(S189)
    //   "Type" -> Shift(S190)
    //   "match" -> Shift(S191)
    //   r#"[1-9][0-9]+"# -> Shift(S192)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S193)
    //   r#"\\(\\)"# -> Shift(S194)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S195)
    //
    //   Literal -> S184
    //   Match -> S185
    //   Name -> S186
    //   Term0 -> S187
    //   Type -> S203
    pub fn __state162<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state189(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state190(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state191(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state192(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state193(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state194(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state195(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state184(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state185(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state186(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state187(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state203(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 163
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["("]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["match"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["with"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" ["("]
    //   Match = "match" Term "with" (*) "end" ["match"]
    //   Match = "match" Term "with" (*) "end" ["with"]
    //   Match = "match" Term "with" (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S205)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S204
    //   Case -> S158
    pub fn __state163<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state205(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state204(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 164
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term (*) "end" [EOF]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term (*) "end" ["data"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term (*) "end" ["extern"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term (*) "end" ["fn"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term (*) "end" [r#"--[^\\n]*\\n"#]
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["end"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S141)
    //   "end" -> Shift(S206)
    //   "match" -> Shift(S143)
    //   r#"[1-9][0-9]+"# -> Shift(S144)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S145)
    //   r#"\\(\\)"# -> Shift(S146)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S147)
    //
    //   Literal -> S136
    //   Match -> S137
    //   Name -> S138
    //   Term0 -> S170
    pub fn __state164<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<Term>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state141(input, __lookbehind, __tokens, __sym7));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state206(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym7));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym7));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym7));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym7));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym6.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym7 = &mut Some(__nt);
                    __result = try!(__state136(input, __lookbehind, __tokens, __lookahead, __sym7));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym7 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym7));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym7 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym7));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym7 = &mut Some(__nt);
                    __result = try!(__state170(input, __lookbehind, __tokens, __lookahead, __sym6, __sym7));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 165
    //   Arg = "(" Name ":" Type ")" (*) ["("]
    //   Arg = "(" Name ":" Type ")" (*) [":"]
    //
    //   "(" -> Reduce(Arg = "(", Name, ":", Type, ")" => ActionFn(11);)
    //   ":" -> Reduce(Arg = "(", Name, ":", Type, ")" => ActionFn(11);)
    //
    pub fn __state165<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (3, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action11(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arg(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 166
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = Type "->" (*) Type0 [")"]
    //   Type = Type "->" (*) Type0 ["->"]
    //   Type0 = (*) Name [")"]
    //   Type0 = (*) Name ["->"]
    //   Type0 = (*) "(" Type ")" [")"]
    //   Type0 = (*) "(" Type ")" ["->"]
    //   Type0 = (*) "Type" [")"]
    //   Type0 = (*) "Type" ["->"]
    //
    //   "(" -> Shift(S209)
    //   "Type" -> Shift(S210)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //
    //   Name -> S207
    //   Type0 -> S208
    pub fn __state166<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state209(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state210(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state207(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Type0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state208(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 167
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" [")"]
    //   Term0 = "(" Term (*) ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S211)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state167<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state211(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 168
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [")"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" [")"]
    //   Match = "match" Term (*) "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S212)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state168<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state212(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 169
    //   Type = Type (*) "->" Type0 [")"]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type0 = "(" Type (*) ")" ["->"]
    //   Type0 = "(" Type (*) ")" [":="]
    //
    //   ")" -> Shift(S213)
    //   "->" -> Shift(S166)
    //
    pub fn __state169<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state213(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 170
    //   Term = Term Term0 (*) ["("]
    //   Term = Term Term0 (*) ["end"]
    //   Term = Term Term0 (*) ["match"]
    //   Term = Term Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term Term0 (*) [r#"\\(\\)"#]
    //   Term = Term Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "end" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "match" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\(\\)"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //
    pub fn __state170<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action13(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 171
    //   Fn = "fn" Name ":" Type ":=" Term "end" (*) [EOF]
    //   Fn = "fn" Name ":" Type ":=" Term "end" (*) ["data"]
    //   Fn = "fn" Name ":" Type ":=" Term "end" (*) ["extern"]
    //   Fn = "fn" Name ":" Type ":=" Term "end" (*) ["fn"]
    //   Fn = "fn" Name ":" Type ":=" Term "end" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Fn = "fn", Name, ":", Type, ":=", Term, "end" => ActionFn(67);)
    //   "data" -> Reduce(Fn = "fn", Name, ":", Type, ":=", Term, "end" => ActionFn(67);)
    //   "extern" -> Reduce(Fn = "fn", Name, ":", Type, ":=", Term, "end" => ActionFn(67);)
    //   "fn" -> Reduce(Fn = "fn", Name, ":", Type, ":=", Term, "end" => ActionFn(67);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Fn = "fn", Name, ":", Type, ":=", Term, "end" => ActionFn(67);)
    //
    pub fn __state171<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Term>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __nt = super::__action67(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Fn(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 172
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["("]
    //   Term0 = "(" Term (*) ")" ["end"]
    //   Term0 = "(" Term (*) ")" ["match"]
    //   Term0 = "(" Term (*) ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term (*) ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" [r#"\\(\\)"#]
    //   Term0 = "(" Term (*) ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S214)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state172<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state214(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 173
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = Arg+ (*) Arg ["("]
    //   Arg+ = Arg+ (*) Arg [":"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["end"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //   ":" -> Shift(S215)
    //
    //   Arg -> S46
    pub fn __state173<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state215(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 174
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["("]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["end"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["match"]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["("]
    //   Match = "match" Term (*) "with" "end" ["end"]
    //   Match = "match" Term (*) "with" "end" ["match"]
    //   Match = "match" Term (*) "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S216)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state174<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state216(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 175
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["->"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [":="]
    //
    //   "end" -> Shift(S217)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state175<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state217(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 176
    //   Match = "match" Term "with" "end" (*) ["->"]
    //   Match = "match" Term "with" "end" (*) [":="]
    //
    //   "->" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   ":=" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state176<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 177
    //   Type0 = Name (*) ["->"]
    //   Type0 = Name (*) ["end"]
    //   Type0 = Name (*) ["|"]
    //
    //   "->" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "end" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "|" -> Reduce(Type0 = Name => ActionFn(30);)
    //
    pub fn __state177<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 178
    //   Type = Type "->" Type0 (*) ["->"]
    //   Type = Type "->" Type0 (*) ["end"]
    //   Type = Type "->" Type0 (*) ["|"]
    //
    //   "->" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "end" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "|" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //
    pub fn __state178<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 179
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = (*) Term0 [")"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Type "->" Type0 [")"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) "Type" [")"]
    //   Type = (*) "Type" ["->"]
    //   Type0 = "(" (*) Type ")" ["->"]
    //   Type0 = "(" (*) Type ")" ["end"]
    //   Type0 = "(" (*) Type ")" ["|"]
    //
    //   "(" -> Shift(S125)
    //   "Type" -> Shift(S126)
    //   "match" -> Shift(S127)
    //   r#"[1-9][0-9]+"# -> Shift(S128)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //   r#"\\(\\)"# -> Shift(S130)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S131)
    //
    //   Literal -> S120
    //   Match -> S121
    //   Name -> S122
    //   Term0 -> S123
    //   Type -> S218
    pub fn __state179<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state218(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 180
    //   Type0 = "Type" (*) ["->"]
    //   Type0 = "Type" (*) ["end"]
    //   Type0 = "Type" (*) ["|"]
    //
    //   "->" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "end" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "|" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //
    pub fn __state180<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 181
    //   Term0 = "(" Term ")" (*) ["->"]
    //   Term0 = "(" Term ")" (*) ["end"]
    //   Term0 = "(" Term ")" (*) ["|"]
    //
    //   "->" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "end" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "|" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state181<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 182
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["->"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["end"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["|"]
    //   Match = "match" Term "with" (*) "end" ["->"]
    //   Match = "match" Term "with" (*) "end" ["end"]
    //   Match = "match" Term "with" (*) "end" ["|"]
    //
    //   "end" -> Shift(S220)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S219
    //   Case -> S158
    pub fn __state182<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state220(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state219(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 183
    //   Type0 = "(" Type ")" (*) [EOF]
    //   Type0 = "(" Type ")" (*) ["->"]
    //   Type0 = "(" Type ")" (*) ["data"]
    //   Type0 = "(" Type ")" (*) ["extern"]
    //   Type0 = "(" Type ")" (*) ["fn"]
    //   Type0 = "(" Type ")" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "->" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "data" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "extern" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "fn" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //
    pub fn __state183<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 184
    //   Term0 = Literal (*) ["->"]
    //   Term0 = Literal (*) ["=>"]
    //
    //   "->" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "=>" -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state184<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 185
    //   Term0 = Match (*) ["->"]
    //   Term0 = Match (*) ["=>"]
    //
    //   "->" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "=>" -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state185<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 186
    //   Term0 = Name (*) ["->"]
    //   Term0 = Name (*) ["=>"]
    //
    //   "->" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "=>" -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state186<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 187
    //   Type = Term0 (*) ["->"]
    //   Type = Term0 (*) ["=>"]
    //
    //   "->" -> Reduce(Type = Term0 => ActionFn(28);)
    //   "=>" -> Reduce(Type = Term0 => ActionFn(28);)
    //
    pub fn __state187<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 188
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [")"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 ["=>"]
    //
    //   "->" -> Shift(S221)
    //   "=>" -> Shift(S222)
    //
    pub fn __state188<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state221(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state222(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 189
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["->"]
    //   Term0 = "(" (*) Term ")" ["=>"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S223
    //   Term0 -> S67
    pub fn __state189<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state223(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 190
    //   Type = "Type" (*) ["->"]
    //   Type = "Type" (*) ["=>"]
    //
    //   "->" -> Reduce(Type = "Type" => ActionFn(26);)
    //   "=>" -> Reduce(Type = "Type" => ActionFn(26);)
    //
    pub fn __state190<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action26(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 191
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["->"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["=>"]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["->"]
    //   Match = "match" (*) Term "with" "end" ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S224
    //   Term0 -> S79
    pub fn __state191<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state224(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 192
    //   Literal = r#"[1-9][0-9]+"# (*) ["->"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["=>"]
    //
    //   "->" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "=>" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state192<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 193
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["=>"]
    //
    //   "->" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "=>" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state193<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 194
    //   Literal = r#"\\(\\)"# (*) ["->"]
    //   Literal = r#"\\(\\)"# (*) ["=>"]
    //
    //   "->" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "=>" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state194<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 195
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["->"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["=>"]
    //
    //   "->" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "=>" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state195<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 196
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["("]
    //   Match = "match" Term "with" (Case)+ (*) "end" [")"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["match"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S225)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state196<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state225(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 197
    //   Match = "match" Term "with" "end" (*) ["("]
    //   Match = "match" Term "with" "end" (*) [")"]
    //   Match = "match" Term "with" "end" (*) ["match"]
    //   Match = "match" Term "with" "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   ")" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "match" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state197<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 198
    //   (Case)+ = (Case)+ Case (*) ["end"]
    //   (Case)+ = (Case)+ Case (*) ["|"]
    //
    //   "end" -> Reduce((Case)+ = (Case)+, Case => ActionFn(71);)
    //   "|" -> Reduce((Case)+ = (Case)+, Case => ActionFn(71);)
    //
    pub fn __state198<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Case>>,
        __sym1: &mut Option<Case>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action71(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::_28Case_29_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 199
    //   Match = "match" Term "with" (Case)+ "end" (*) [EOF]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["->"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["data"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["extern"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["fn"]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "->" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "data" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "extern" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "fn" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state199<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (2, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 200
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = Name (*) ["=>"]
    //   Pattern = Name (*) PatternO+ ["=>"]
    //   PatternO = (*) Name ["("]
    //   PatternO = (*) Name ["=>"]
    //   PatternO = (*) Name ["_"]
    //   PatternO = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "(" Pattern ")" ["("]
    //   PatternO = (*) "(" Pattern ")" ["=>"]
    //   PatternO = (*) "(" Pattern ")" ["_"]
    //   PatternO = (*) "(" Pattern ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "_" ["("]
    //   PatternO = (*) "_" ["=>"]
    //   PatternO = (*) "_" ["_"]
    //   PatternO = (*) "_" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO+ = (*) PatternO ["("]
    //   PatternO+ = (*) PatternO ["=>"]
    //   PatternO+ = (*) PatternO ["_"]
    //   PatternO+ = (*) PatternO [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO+ = (*) PatternO+ PatternO ["("]
    //   PatternO+ = (*) PatternO+ PatternO ["=>"]
    //   PatternO+ = (*) PatternO+ PatternO ["_"]
    //   PatternO+ = (*) PatternO+ PatternO [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S229)
    //   "=>" -> Reduce(Pattern = Name => ActionFn(78);)
    //   "_" -> Shift(S230)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S202)
    //
    //   Name -> S226
    //   PatternO -> S227
    //   PatternO+ -> S228
    pub fn __state200<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state229(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state230(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action78(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Pattern(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state226(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::PatternO(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state227(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::PatternO_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state228(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 201
    //   Case = "|" Pattern (*) "=>" Term ["end"]
    //   Case = "|" Pattern (*) "=>" Term ["|"]
    //
    //   "=>" -> Shift(S231)
    //
    pub fn __state201<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state231(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 202
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["=>"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["_"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "=>" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "_" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state202<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 203
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["with"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 ["=>"]
    //
    //   "->" -> Shift(S221)
    //   "=>" -> Shift(S232)
    //
    pub fn __state203<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state221(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state232(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 204
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["("]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["match"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["with"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S233)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state204<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state233(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 205
    //   Match = "match" Term "with" "end" (*) ["("]
    //   Match = "match" Term "with" "end" (*) ["match"]
    //   Match = "match" Term "with" "end" (*) ["with"]
    //   Match = "match" Term "with" "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "match" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "with" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state205<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 206
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term "end" (*) [EOF]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term "end" (*) ["data"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term "end" (*) ["extern"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term "end" (*) ["fn"]
    //   Fn = "fn" Name Arg+ ":" Type ":=" Term "end" (*) [r#"--[^\\n]*\\n"#]
    //
    //   EOF -> Reduce(Fn = "fn", Name, Arg+, ":", Type, ":=", Term, "end" => ActionFn(68);)
    //   "data" -> Reduce(Fn = "fn", Name, Arg+, ":", Type, ":=", Term, "end" => ActionFn(68);)
    //   "extern" -> Reduce(Fn = "fn", Name, Arg+, ":", Type, ":=", Term, "end" => ActionFn(68);)
    //   "fn" -> Reduce(Fn = "fn", Name, Arg+, ":", Type, ":=", Term, "end" => ActionFn(68);)
    //   r#"--[^\\n]*\\n"# -> Reduce(Fn = "fn", Name, Arg+, ":", Type, ":=", Term, "end" => ActionFn(68);)
    //
    pub fn __state206<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym3: &mut Option<&'input str>,
        __sym4: &mut Option<Term>,
        __sym5: &mut Option<&'input str>,
        __sym6: &mut Option<Term>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (8, _), _)) |
            Some((_, (10, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (17, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __nt = super::__action68(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Fn(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 207
    //   Type0 = Name (*) [")"]
    //   Type0 = Name (*) ["->"]
    //
    //   ")" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "->" -> Reduce(Type0 = Name => ActionFn(30);)
    //
    pub fn __state207<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 208
    //   Type = Type "->" Type0 (*) [")"]
    //   Type = Type "->" Type0 (*) ["->"]
    //
    //   ")" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "->" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //
    pub fn __state208<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 209
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = (*) Term0 [")"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Type "->" Type0 [")"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) "Type" [")"]
    //   Type = (*) "Type" ["->"]
    //   Type0 = "(" (*) Type ")" [")"]
    //   Type0 = "(" (*) Type ")" ["->"]
    //
    //   "(" -> Shift(S125)
    //   "Type" -> Shift(S126)
    //   "match" -> Shift(S127)
    //   r#"[1-9][0-9]+"# -> Shift(S128)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //   r#"\\(\\)"# -> Shift(S130)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S131)
    //
    //   Literal -> S120
    //   Match -> S121
    //   Name -> S122
    //   Term0 -> S123
    //   Type -> S234
    pub fn __state209<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state234(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 210
    //   Type0 = "Type" (*) [")"]
    //   Type0 = "Type" (*) ["->"]
    //
    //   ")" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "->" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //
    pub fn __state210<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 211
    //   Term0 = "(" Term ")" (*) [")"]
    //   Term0 = "(" Term ")" (*) ["->"]
    //
    //   ")" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "->" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state211<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 212
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [")"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["->"]
    //   Match = "match" Term "with" (*) "end" [")"]
    //   Match = "match" Term "with" (*) "end" ["->"]
    //
    //   "end" -> Shift(S236)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S235
    //   Case -> S158
    pub fn __state212<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state236(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state235(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 213
    //   Type0 = "(" Type ")" (*) ["->"]
    //   Type0 = "(" Type ")" (*) [":="]
    //
    //   "->" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   ":=" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //
    pub fn __state213<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 214
    //   Term0 = "(" Term ")" (*) ["("]
    //   Term0 = "(" Term ")" (*) ["end"]
    //   Term0 = "(" Term ")" (*) ["match"]
    //   Term0 = "(" Term ")" (*) [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term ")" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term ")" (*) [r#"\\(\\)"#]
    //   Term0 = "(" Term ")" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "end" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "match" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\(\\)"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state214<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 215
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["=>"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# ["=>"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["=>"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["end"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal ["=>"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match ["=>"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name ["=>"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" ["=>"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 ["=>"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 ["=>"]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" ["=>"]
    //
    //   "(" -> Shift(S189)
    //   "Type" -> Shift(S190)
    //   "match" -> Shift(S191)
    //   r#"[1-9][0-9]+"# -> Shift(S192)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S193)
    //   r#"\\(\\)"# -> Shift(S194)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S195)
    //
    //   Literal -> S184
    //   Match -> S185
    //   Name -> S186
    //   Term0 -> S187
    //   Type -> S237
    pub fn __state215<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state189(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state190(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state191(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state192(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state193(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state194(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state195(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state184(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state185(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state186(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state187(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state237(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 216
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["("]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["end"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["match"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" ["("]
    //   Match = "match" Term "with" (*) "end" ["end"]
    //   Match = "match" Term "with" (*) "end" ["match"]
    //   Match = "match" Term "with" (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S239)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S238
    //   Case -> S158
    pub fn __state216<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state239(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state238(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 217
    //   Match = "match" Term "with" (Case)+ "end" (*) ["->"]
    //   Match = "match" Term "with" (Case)+ "end" (*) [":="]
    //
    //   "->" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   ":=" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state217<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (4, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 218
    //   Type = Type (*) "->" Type0 [")"]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type0 = "(" Type (*) ")" ["->"]
    //   Type0 = "(" Type (*) ")" ["end"]
    //   Type0 = "(" Type (*) ")" ["|"]
    //
    //   ")" -> Shift(S240)
    //   "->" -> Shift(S166)
    //
    pub fn __state218<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state240(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 219
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["->"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["end"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["|"]
    //
    //   "end" -> Shift(S241)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state219<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state241(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 220
    //   Match = "match" Term "with" "end" (*) ["->"]
    //   Match = "match" Term "with" "end" (*) ["end"]
    //   Match = "match" Term "with" "end" (*) ["|"]
    //
    //   "->" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "end" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "|" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state220<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 221
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Type = Type "->" (*) Type0 ["->"]
    //   Type = Type "->" (*) Type0 ["=>"]
    //   Type0 = (*) Name ["->"]
    //   Type0 = (*) Name ["=>"]
    //   Type0 = (*) "(" Type ")" ["->"]
    //   Type0 = (*) "(" Type ")" ["=>"]
    //   Type0 = (*) "Type" ["->"]
    //   Type0 = (*) "Type" ["=>"]
    //
    //   "(" -> Shift(S244)
    //   "Type" -> Shift(S245)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S193)
    //
    //   Name -> S242
    //   Type0 -> S243
    pub fn __state221<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state244(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state245(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state193(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state242(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Type0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state243(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 222
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["("]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [")"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S246
    pub fn __state222<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state246(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 223
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["->"]
    //   Term0 = "(" Term (*) ")" ["=>"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S247)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state223<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state247(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 224
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["->"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["=>"]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["->"]
    //   Match = "match" Term (*) "with" "end" ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S248)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state224<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state248(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 225
    //   Match = "match" Term "with" (Case)+ "end" (*) ["("]
    //   Match = "match" Term "with" (Case)+ "end" (*) [")"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["match"]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   ")" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "match" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state225<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 226
    //   PatternO = Name (*) ["("]
    //   PatternO = Name (*) ["=>"]
    //   PatternO = Name (*) ["_"]
    //   PatternO = Name (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO = Name => ActionFn(23);)
    //   "=>" -> Reduce(PatternO = Name => ActionFn(23);)
    //   "_" -> Reduce(PatternO = Name => ActionFn(23);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO = Name => ActionFn(23);)
    //
    pub fn __state226<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action23(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 227
    //   PatternO+ = PatternO (*) ["("]
    //   PatternO+ = PatternO (*) ["=>"]
    //   PatternO+ = PatternO (*) ["_"]
    //   PatternO+ = PatternO (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //   "=>" -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //   "_" -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //
    pub fn __state227<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 228
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = Name PatternO+ (*) ["=>"]
    //   PatternO = (*) Name ["("]
    //   PatternO = (*) Name ["=>"]
    //   PatternO = (*) Name ["_"]
    //   PatternO = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "(" Pattern ")" ["("]
    //   PatternO = (*) "(" Pattern ")" ["=>"]
    //   PatternO = (*) "(" Pattern ")" ["_"]
    //   PatternO = (*) "(" Pattern ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "_" ["("]
    //   PatternO = (*) "_" ["=>"]
    //   PatternO = (*) "_" ["_"]
    //   PatternO = (*) "_" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO+ = PatternO+ (*) PatternO ["("]
    //   PatternO+ = PatternO+ (*) PatternO ["=>"]
    //   PatternO+ = PatternO+ (*) PatternO ["_"]
    //   PatternO+ = PatternO+ (*) PatternO [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S229)
    //   "=>" -> Reduce(Pattern = Name, PatternO+ => ActionFn(79);)
    //   "_" -> Shift(S230)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S202)
    //
    //   Name -> S226
    //   PatternO -> S249
    pub fn __state228<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<::std::vec::Vec<Pattern>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state229(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state230(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Pattern(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state226(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::PatternO(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state249(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 229
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = (*) Name [")"]
    //   Pattern = (*) Name PatternO+ [")"]
    //   PatternO = "(" (*) Pattern ")" ["("]
    //   PatternO = "(" (*) Pattern ")" ["=>"]
    //   PatternO = "(" (*) Pattern ")" ["_"]
    //   PatternO = "(" (*) Pattern ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S252)
    //
    //   Name -> S250
    //   Pattern -> S251
    pub fn __state229<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state252(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state250(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Pattern(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state251(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 230
    //   PatternO = "_" (*) ["("]
    //   PatternO = "_" (*) ["=>"]
    //   PatternO = "_" (*) ["_"]
    //   PatternO = "_" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO = "_" => ActionFn(24);)
    //   "=>" -> Reduce(PatternO = "_" => ActionFn(24);)
    //   "_" -> Reduce(PatternO = "_" => ActionFn(24);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO = "_" => ActionFn(24);)
    //
    pub fn __state230<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 231
    //   Case = "|" Pattern "=>" (*) Term ["end"]
    //   Case = "|" Pattern "=>" (*) Term ["|"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["|"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["|"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["|"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["|"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["end"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["|"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["end"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["|"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["end"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["|"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["|"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["|"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["|"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["|"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S258)
    //   "fun" -> Shift(S259)
    //   "match" -> Shift(S260)
    //   r#"[1-9][0-9]+"# -> Shift(S261)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S262)
    //   r#"\\(\\)"# -> Shift(S263)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S264)
    //
    //   Literal -> S253
    //   Match -> S254
    //   Name -> S255
    //   Term -> S256
    //   Term0 -> S257
    pub fn __state231<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state258(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state259(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state260(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state261(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state262(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state263(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state264(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state253(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state254(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state255(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state256(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state257(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 232
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["("]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["with"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S265
    pub fn __state232<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state265(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 233
    //   Match = "match" Term "with" (Case)+ "end" (*) ["("]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["match"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["with"]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "match" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "with" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state233<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 234
    //   Type = Type (*) "->" Type0 [")"]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type0 = "(" Type (*) ")" [")"]
    //   Type0 = "(" Type (*) ")" ["->"]
    //
    //   ")" -> Shift(S266)
    //   "->" -> Shift(S166)
    //
    pub fn __state234<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state266(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 235
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [")"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["->"]
    //
    //   "end" -> Shift(S267)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state235<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state267(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 236
    //   Match = "match" Term "with" "end" (*) [")"]
    //   Match = "match" Term "with" "end" (*) ["->"]
    //
    //   ")" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "->" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state236<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 237
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["end"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 ["=>"]
    //
    //   "->" -> Shift(S221)
    //   "=>" -> Shift(S268)
    //
    pub fn __state237<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state221(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state268(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 238
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["("]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["end"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["match"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S269)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state238<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state269(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 239
    //   Match = "match" Term "with" "end" (*) ["("]
    //   Match = "match" Term "with" "end" (*) ["end"]
    //   Match = "match" Term "with" "end" (*) ["match"]
    //   Match = "match" Term "with" "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "end" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "match" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state239<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 240
    //   Type0 = "(" Type ")" (*) ["->"]
    //   Type0 = "(" Type ")" (*) ["end"]
    //   Type0 = "(" Type ")" (*) ["|"]
    //
    //   "->" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "end" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "|" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //
    pub fn __state240<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 241
    //   Match = "match" Term "with" (Case)+ "end" (*) ["->"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["end"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["|"]
    //
    //   "->" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "end" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "|" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state241<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 242
    //   Type0 = Name (*) ["->"]
    //   Type0 = Name (*) ["=>"]
    //
    //   "->" -> Reduce(Type0 = Name => ActionFn(30);)
    //   "=>" -> Reduce(Type0 = Name => ActionFn(30);)
    //
    pub fn __state242<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 243
    //   Type = Type "->" Type0 (*) ["->"]
    //   Type = Type "->" Type0 (*) ["=>"]
    //
    //   "->" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //   "=>" -> Reduce(Type = Type, "->", Type0 => ActionFn(27);)
    //
    pub fn __state243<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 244
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Type = (*) Term0 [")"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Type "->" Type0 [")"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) "Type" [")"]
    //   Type = (*) "Type" ["->"]
    //   Type0 = "(" (*) Type ")" ["->"]
    //   Type0 = "(" (*) Type ")" ["=>"]
    //
    //   "(" -> Shift(S125)
    //   "Type" -> Shift(S126)
    //   "match" -> Shift(S127)
    //   r#"[1-9][0-9]+"# -> Shift(S128)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S129)
    //   r#"\\(\\)"# -> Shift(S130)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S131)
    //
    //   Literal -> S120
    //   Match -> S121
    //   Name -> S122
    //   Term0 -> S123
    //   Type -> S270
    pub fn __state244<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state270(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 245
    //   Type0 = "Type" (*) ["->"]
    //   Type0 = "Type" (*) ["=>"]
    //
    //   "->" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //   "=>" -> Reduce(Type0 = "Type" => ActionFn(29);)
    //
    pub fn __state245<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 246
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["("]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [")"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   ")" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "match" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\(\\)"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //
    pub fn __state246<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action69(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 247
    //   Term0 = "(" Term ")" (*) ["->"]
    //   Term0 = "(" Term ")" (*) ["=>"]
    //
    //   "->" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "=>" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state247<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 248
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["->"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["=>"]
    //   Match = "match" Term "with" (*) "end" ["->"]
    //   Match = "match" Term "with" (*) "end" ["=>"]
    //
    //   "end" -> Shift(S272)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S271
    //   Case -> S158
    pub fn __state248<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state272(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state271(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 249
    //   PatternO+ = PatternO+ PatternO (*) ["("]
    //   PatternO+ = PatternO+ PatternO (*) ["=>"]
    //   PatternO+ = PatternO+ PatternO (*) ["_"]
    //   PatternO+ = PatternO+ PatternO (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //   "=>" -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //   "_" -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //
    pub fn __state249<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Pattern>>,
        __sym1: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action60(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 250
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = Name (*) [")"]
    //   Pattern = Name (*) PatternO+ [")"]
    //   PatternO = (*) Name ["("]
    //   PatternO = (*) Name [")"]
    //   PatternO = (*) Name ["_"]
    //   PatternO = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "(" Pattern ")" ["("]
    //   PatternO = (*) "(" Pattern ")" [")"]
    //   PatternO = (*) "(" Pattern ")" ["_"]
    //   PatternO = (*) "(" Pattern ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "_" ["("]
    //   PatternO = (*) "_" [")"]
    //   PatternO = (*) "_" ["_"]
    //   PatternO = (*) "_" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO+ = (*) PatternO ["("]
    //   PatternO+ = (*) PatternO [")"]
    //   PatternO+ = (*) PatternO ["_"]
    //   PatternO+ = (*) PatternO [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO+ = (*) PatternO+ PatternO ["("]
    //   PatternO+ = (*) PatternO+ PatternO [")"]
    //   PatternO+ = (*) PatternO+ PatternO ["_"]
    //   PatternO+ = (*) PatternO+ PatternO [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S276)
    //   ")" -> Reduce(Pattern = Name => ActionFn(78);)
    //   "_" -> Shift(S277)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S252)
    //
    //   Name -> S273
    //   PatternO -> S274
    //   PatternO+ -> S275
    pub fn __state250<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state276(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state277(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state252(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action78(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Pattern(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state273(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::PatternO(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state274(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::PatternO_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state275(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 251
    //   PatternO = "(" Pattern (*) ")" ["("]
    //   PatternO = "(" Pattern (*) ")" ["=>"]
    //   PatternO = "(" Pattern (*) ")" ["_"]
    //   PatternO = "(" Pattern (*) ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   ")" -> Shift(S278)
    //
    pub fn __state251<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state278(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 252
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [")"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["_"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   ")" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "_" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state252<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 253
    //   Term0 = Literal (*) ["("]
    //   Term0 = Literal (*) ["end"]
    //   Term0 = Literal (*) ["match"]
    //   Term0 = Literal (*) ["|"]
    //   Term0 = Literal (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Literal (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Literal (*) [r#"\\(\\)"#]
    //   Term0 = Literal (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "end" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "match" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   "|" -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Literal => ActionFn(16);)
    //
    pub fn __state253<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Literal>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action16(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 254
    //   Term0 = Match (*) ["("]
    //   Term0 = Match (*) ["end"]
    //   Term0 = Match (*) ["match"]
    //   Term0 = Match (*) ["|"]
    //   Term0 = Match (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Match (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Match (*) [r#"\\(\\)"#]
    //   Term0 = Match (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "end" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "match" -> Reduce(Term0 = Match => ActionFn(17);)
    //   "|" -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Match => ActionFn(17);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Match => ActionFn(17);)
    //
    pub fn __state254<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<(Term, Vec<Case>)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action17(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 255
    //   Term0 = Name (*) ["("]
    //   Term0 = Name (*) ["end"]
    //   Term0 = Name (*) ["match"]
    //   Term0 = Name (*) ["|"]
    //   Term0 = Name (*) [r#"[1-9][0-9]+"#]
    //   Term0 = Name (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = Name (*) [r#"\\(\\)"#]
    //   Term0 = Name (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "end" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "match" -> Reduce(Term0 = Name => ActionFn(15);)
    //   "|" -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\(\\)"# -> Reduce(Term0 = Name => ActionFn(15);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = Name => ActionFn(15);)
    //
    pub fn __state255<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action15(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 256
    //   Case = "|" Pattern "=>" Term (*) ["end"]
    //   Case = "|" Pattern "=>" Term (*) ["|"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["|"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["|"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["|"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["|"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["end"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["|"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["|"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["|"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["|"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["|"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S258)
    //   "end" -> Reduce(Case = "|", Pattern, "=>", Term => ActionFn(21);)
    //   "match" -> Shift(S260)
    //   "|" -> Reduce(Case = "|", Pattern, "=>", Term => ActionFn(21);)
    //   r#"[1-9][0-9]+"# -> Shift(S261)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S262)
    //   r#"\\(\\)"# -> Shift(S263)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S264)
    //
    //   Literal -> S253
    //   Match -> S254
    //   Name -> S255
    //   Term0 -> S279
    pub fn __state256<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state258(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state260(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state261(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state262(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state263(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state264(input, __lookbehind, __tokens, __sym4));
            }
            Some((_, (9, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action21(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Case(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state253(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state254(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state255(input, __lookbehind, __tokens, __lookahead, __sym4));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state279(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 257
    //   Term = Term0 (*) ["("]
    //   Term = Term0 (*) ["end"]
    //   Term = Term0 (*) ["match"]
    //   Term = Term0 (*) ["|"]
    //   Term = Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term0 (*) [r#"\\(\\)"#]
    //   Term = Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "end" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "match" -> Reduce(Term = Term0 => ActionFn(14);)
    //   "|" -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\(\\)"# -> Reduce(Term = Term0 => ActionFn(14);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term0 => ActionFn(14);)
    //
    pub fn __state257<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action14(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 258
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 [")"]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 [")"]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [")"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" ["("]
    //   Term0 = "(" (*) Term ")" ["end"]
    //   Term0 = "(" (*) Term ")" ["match"]
    //   Term0 = "(" (*) Term ")" ["|"]
    //   Term0 = "(" (*) Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" (*) Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" (*) Term ")" [r#"\\(\\)"#]
    //   Term0 = "(" (*) Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   "fun" -> Shift(S69)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term -> S280
    //   Term0 -> S67
    pub fn __state258<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state69(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state280(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 259
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = (*) Arg ["("]
    //   Arg+ = (*) Arg [":"]
    //   Arg+ = (*) Arg+ Arg ["("]
    //   Arg+ = (*) Arg+ Arg [":"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["("]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["end"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 ["|"]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" (*) Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //
    //   Arg -> S27
    //   Arg+ -> S281
    pub fn __state259<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arg_2b(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state281(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 260
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["("]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["end"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["match"]
    //   Match = "match" (*) Term "with" (Case)+ "end" ["|"]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" ["("]
    //   Match = "match" (*) Term "with" "end" ["end"]
    //   Match = "match" (*) Term "with" "end" ["match"]
    //   Match = "match" (*) Term "with" "end" ["|"]
    //   Match = "match" (*) Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" (*) Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\(\\)"#]
    //   Match = "match" (*) Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 ["("]
    //   Term = (*) Term Term0 ["match"]
    //   Term = (*) Term Term0 ["with"]
    //   Term = (*) Term Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term Term0 [r#"\\(\\)"#]
    //   Term = (*) Term Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 ["("]
    //   Term = (*) Term0 ["match"]
    //   Term = (*) Term0 ["with"]
    //   Term = (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) Term0 [r#"\\(\\)"#]
    //   Term = (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["("]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["match"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 ["with"]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = (*) "fun" Arg+ ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "fun" -> Shift(S81)
    //   "match" -> Shift(S82)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term -> S282
    //   Term0 -> S79
    pub fn __state260<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Term(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state282(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 261
    //   Literal = r#"[1-9][0-9]+"# (*) ["("]
    //   Literal = r#"[1-9][0-9]+"# (*) ["end"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["match"]
    //   Literal = r#"[1-9][0-9]+"# (*) ["|"]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\(\\)"#]
    //   Literal = r#"[1-9][0-9]+"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "end" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "match" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   "|" -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"[1-9][0-9]+"# => ActionFn(33);)
    //
    pub fn __state261<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action33(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 262
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["|"]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "end" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "match" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   "|" -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[1-9][0-9]+"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\(\\)"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Name = r#"[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(32);)
    //
    pub fn __state262<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action32(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Name(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 263
    //   Literal = r#"\\(\\)"# (*) ["("]
    //   Literal = r#"\\(\\)"# (*) ["end"]
    //   Literal = r#"\\(\\)"# (*) ["match"]
    //   Literal = r#"\\(\\)"# (*) ["|"]
    //   Literal = r#"\\(\\)"# (*) [r#"[1-9][0-9]+"#]
    //   Literal = r#"\\(\\)"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\(\\)"#]
    //   Literal = r#"\\(\\)"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "end" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "match" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   "|" -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[1-9][0-9]+"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\(\\)"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Literal = r#"\\(\\)"# => ActionFn(34);)
    //
    pub fn __state263<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action34(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Literal(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 264
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["("]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["end"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["match"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) ["|"]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[1-9][0-9]+"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\(\\)"#]
    //   Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "end" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "match" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   "|" -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\(\\)"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# => ActionFn(18);)
    //
    pub fn __state264<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action18(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 265
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["("]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["with"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "match" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "with" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\(\\)"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //
    pub fn __state265<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (15, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action69(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 266
    //   Type0 = "(" Type ")" (*) [")"]
    //   Type0 = "(" Type ")" (*) ["->"]
    //
    //   ")" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "->" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //
    pub fn __state266<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 267
    //   Match = "match" Term "with" (Case)+ "end" (*) [")"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["->"]
    //
    //   ")" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "->" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state267<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 268
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["("]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["end"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S141)
    //   "match" -> Shift(S143)
    //   r#"[1-9][0-9]+"# -> Shift(S144)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S145)
    //   r#"\\(\\)"# -> Shift(S146)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S147)
    //
    //   Literal -> S136
    //   Match -> S137
    //   Name -> S138
    //   Term0 -> S283
    pub fn __state268<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state141(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state136(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state283(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 269
    //   Match = "match" Term "with" (Case)+ "end" (*) ["("]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["end"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["match"]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "end" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "match" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state269<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 270
    //   Type = Type (*) "->" Type0 [")"]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type0 = "(" Type (*) ")" ["->"]
    //   Type0 = "(" Type (*) ")" ["=>"]
    //
    //   ")" -> Shift(S284)
    //   "->" -> Shift(S166)
    //
    pub fn __state270<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state284(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 271
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["->"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["=>"]
    //
    //   "end" -> Shift(S285)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state271<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state285(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 272
    //   Match = "match" Term "with" "end" (*) ["->"]
    //   Match = "match" Term "with" "end" (*) ["=>"]
    //
    //   "->" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "=>" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state272<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 273
    //   PatternO = Name (*) ["("]
    //   PatternO = Name (*) [")"]
    //   PatternO = Name (*) ["_"]
    //   PatternO = Name (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO = Name => ActionFn(23);)
    //   ")" -> Reduce(PatternO = Name => ActionFn(23);)
    //   "_" -> Reduce(PatternO = Name => ActionFn(23);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO = Name => ActionFn(23);)
    //
    pub fn __state273<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action23(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 274
    //   PatternO+ = PatternO (*) ["("]
    //   PatternO+ = PatternO (*) [")"]
    //   PatternO+ = PatternO (*) ["_"]
    //   PatternO+ = PatternO (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //   ")" -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //   "_" -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO+ = PatternO => ActionFn(59);)
    //
    pub fn __state274<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action59(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 275
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = Name PatternO+ (*) [")"]
    //   PatternO = (*) Name ["("]
    //   PatternO = (*) Name [")"]
    //   PatternO = (*) Name ["_"]
    //   PatternO = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "(" Pattern ")" ["("]
    //   PatternO = (*) "(" Pattern ")" [")"]
    //   PatternO = (*) "(" Pattern ")" ["_"]
    //   PatternO = (*) "(" Pattern ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO = (*) "_" ["("]
    //   PatternO = (*) "_" [")"]
    //   PatternO = (*) "_" ["_"]
    //   PatternO = (*) "_" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   PatternO+ = PatternO+ (*) PatternO ["("]
    //   PatternO+ = PatternO+ (*) PatternO [")"]
    //   PatternO+ = PatternO+ (*) PatternO ["_"]
    //   PatternO+ = PatternO+ (*) PatternO [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S276)
    //   ")" -> Reduce(Pattern = Name, PatternO+ => ActionFn(79);)
    //   "_" -> Shift(S277)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S252)
    //
    //   Name -> S273
    //   PatternO -> S286
    pub fn __state275<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
        __sym1: &mut Option<::std::vec::Vec<Pattern>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state276(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state277(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state252(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action79(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Pattern(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state273(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::PatternO(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state286(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 276
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["_"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Pattern = (*) Name [")"]
    //   Pattern = (*) Name PatternO+ [")"]
    //   PatternO = "(" (*) Pattern ")" ["("]
    //   PatternO = "(" (*) Pattern ")" [")"]
    //   PatternO = "(" (*) Pattern ")" ["_"]
    //   PatternO = "(" (*) Pattern ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S252)
    //
    //   Name -> S250
    //   Pattern -> S287
    pub fn __state276<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state252(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Name(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state250(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Pattern(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state287(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 277
    //   PatternO = "_" (*) ["("]
    //   PatternO = "_" (*) [")"]
    //   PatternO = "_" (*) ["_"]
    //   PatternO = "_" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO = "_" => ActionFn(24);)
    //   ")" -> Reduce(PatternO = "_" => ActionFn(24);)
    //   "_" -> Reduce(PatternO = "_" => ActionFn(24);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO = "_" => ActionFn(24);)
    //
    pub fn __state277<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 278
    //   PatternO = "(" Pattern ")" (*) ["("]
    //   PatternO = "(" Pattern ")" (*) ["=>"]
    //   PatternO = "(" Pattern ")" (*) ["_"]
    //   PatternO = "(" Pattern ")" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //   "=>" -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //   "_" -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //
    pub fn __state278<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (5, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action25(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 279
    //   Term = Term Term0 (*) ["("]
    //   Term = Term Term0 (*) ["end"]
    //   Term = Term Term0 (*) ["match"]
    //   Term = Term Term0 (*) ["|"]
    //   Term = Term Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = Term Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term Term0 (*) [r#"\\(\\)"#]
    //   Term = Term Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "end" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "match" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   "|" -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\(\\)"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = Term, Term0 => ActionFn(13);)
    //
    pub fn __state279<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Term>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action13(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 280
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# [")"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# [")"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" [")"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" [")"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 [")"]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal [")"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match [")"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name [")"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" [")"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" ["("]
    //   Term0 = "(" Term (*) ")" ["end"]
    //   Term0 = "(" Term (*) ")" ["match"]
    //   Term0 = "(" Term (*) ")" ["|"]
    //   Term0 = "(" Term (*) ")" [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term (*) ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term (*) ")" [r#"\\(\\)"#]
    //   Term0 = "(" Term (*) ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [")"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S68)
    //   ")" -> Shift(S288)
    //   "match" -> Shift(S70)
    //   r#"[1-9][0-9]+"# -> Shift(S71)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S72)
    //   r#"\\(\\)"# -> Shift(S73)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S74)
    //
    //   Literal -> S63
    //   Match -> S64
    //   Name -> S65
    //   Term0 -> S109
    pub fn __state280<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state288(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 281
    //   Arg = (*) "(" Name ":" Type ")" ["("]
    //   Arg = (*) "(" Name ":" Type ")" [":"]
    //   Arg+ = Arg+ (*) Arg ["("]
    //   Arg+ = Arg+ (*) Arg [":"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["end"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 ["|"]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ (*) ":" Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S29)
    //   ":" -> Shift(S289)
    //
    //   Arg -> S46
    pub fn __state281<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state289(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Arg(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 282
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["with"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["with"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["with"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["("]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["end"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["match"]
    //   Match = "match" Term (*) "with" (Case)+ "end" ["|"]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["with"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" ["("]
    //   Match = "match" Term (*) "with" "end" ["end"]
    //   Match = "match" Term (*) "with" "end" ["match"]
    //   Match = "match" Term (*) "with" "end" ["|"]
    //   Match = "match" Term (*) "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term (*) "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\(\\)"#]
    //   Match = "match" Term (*) "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 ["("]
    //   Term = Term (*) Term0 ["match"]
    //   Term = Term (*) Term0 ["with"]
    //   Term = Term (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = Term (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = Term (*) Term0 [r#"\\(\\)"#]
    //   Term = Term (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["with"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["with"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["with"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["with"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["with"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S80)
    //   "match" -> Shift(S82)
    //   "with" -> Shift(S290)
    //   r#"[1-9][0-9]+"# -> Shift(S83)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S84)
    //   r#"\\(\\)"# -> Shift(S85)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S86)
    //
    //   Literal -> S75
    //   Match -> S76
    //   Name -> S77
    //   Term0 -> S114
    pub fn __state282<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state290(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state84(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state85(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 283
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["("]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["end"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "end" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "match" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\(\\)"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //
    pub fn __state283<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action69(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 284
    //   Type0 = "(" Type ")" (*) ["->"]
    //   Type0 = "(" Type ")" (*) ["=>"]
    //
    //   "->" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //   "=>" -> Reduce(Type0 = "(", Type, ")" => ActionFn(31);)
    //
    pub fn __state284<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action31(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Type0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 285
    //   Match = "match" Term "with" (Case)+ "end" (*) ["->"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["=>"]
    //
    //   "->" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "=>" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state285<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (2, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 286
    //   PatternO+ = PatternO+ PatternO (*) ["("]
    //   PatternO+ = PatternO+ PatternO (*) [")"]
    //   PatternO+ = PatternO+ PatternO (*) ["_"]
    //   PatternO+ = PatternO+ PatternO (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //   ")" -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //   "_" -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO+ = PatternO+, PatternO => ActionFn(60);)
    //
    pub fn __state286<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<::std::vec::Vec<Pattern>>,
        __sym1: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action60(input, __sym0, __sym1, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO_2b(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 287
    //   PatternO = "(" Pattern (*) ")" ["("]
    //   PatternO = "(" Pattern (*) ")" [")"]
    //   PatternO = "(" Pattern (*) ")" ["_"]
    //   PatternO = "(" Pattern (*) ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   ")" -> Shift(S291)
    //
    pub fn __state287<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state291(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 288
    //   Term0 = "(" Term ")" (*) ["("]
    //   Term0 = "(" Term ")" (*) ["end"]
    //   Term0 = "(" Term ")" (*) ["match"]
    //   Term0 = "(" Term ")" (*) ["|"]
    //   Term0 = "(" Term ")" (*) [r#"[1-9][0-9]+"#]
    //   Term0 = "(" Term ")" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = "(" Term ")" (*) [r#"\\(\\)"#]
    //   Term0 = "(" Term ")" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "end" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "match" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   "|" -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\(\\)"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term0 = "(", Term, ")" => ActionFn(19);)
    //
    pub fn __state288<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action19(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term0(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 289
    //   Literal = (*) r#"[1-9][0-9]+"# ["->"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["=>"]
    //   Literal = (*) r#"\\(\\)"# ["->"]
    //   Literal = (*) r#"\\(\\)"# ["=>"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["->"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["=>"]
    //   Match = (*) "match" Term "with" "end" ["->"]
    //   Match = (*) "match" Term "with" "end" ["=>"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["end"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 ["|"]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" (*) Type "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["->"]
    //   Term0 = (*) Literal ["=>"]
    //   Term0 = (*) Match ["->"]
    //   Term0 = (*) Match ["=>"]
    //   Term0 = (*) Name ["->"]
    //   Term0 = (*) Name ["=>"]
    //   Term0 = (*) "(" Term ")" ["->"]
    //   Term0 = (*) "(" Term ")" ["=>"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["->"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["=>"]
    //   Type = (*) Term0 ["->"]
    //   Type = (*) Term0 ["=>"]
    //   Type = (*) Type "->" Type0 ["->"]
    //   Type = (*) Type "->" Type0 ["=>"]
    //   Type = (*) "Type" ["->"]
    //   Type = (*) "Type" ["=>"]
    //
    //   "(" -> Shift(S189)
    //   "Type" -> Shift(S190)
    //   "match" -> Shift(S191)
    //   r#"[1-9][0-9]+"# -> Shift(S192)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S193)
    //   r#"\\(\\)"# -> Shift(S194)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S195)
    //
    //   Literal -> S184
    //   Match -> S185
    //   Name -> S186
    //   Term0 -> S187
    //   Type -> S292
    pub fn __state289<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state189(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state190(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state191(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state192(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state193(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state194(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state195(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state184(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state185(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state186(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state187(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Type(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state292(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 290
    //   (Case)+ = (*) (Case)+ Case ["end"]
    //   (Case)+ = (*) (Case)+ Case ["|"]
    //   (Case)+ = (*) Case ["end"]
    //   (Case)+ = (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["("]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["end"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["match"]
    //   Match = "match" Term "with" (*) (Case)+ "end" ["|"]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" ["("]
    //   Match = "match" Term "with" (*) "end" ["end"]
    //   Match = "match" Term "with" (*) "end" ["match"]
    //   Match = "match" Term "with" (*) "end" ["|"]
    //   Match = "match" Term "with" (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S294)
    //   "|" -> Shift(S160)
    //
    //   (Case)+ -> S293
    //   Case -> S158
    pub fn __state290<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state294(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::_28Case_29_2b(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state293(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Case(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 291
    //   PatternO = "(" Pattern ")" (*) ["("]
    //   PatternO = "(" Pattern ")" (*) [")"]
    //   PatternO = "(" Pattern ")" (*) ["_"]
    //   PatternO = "(" Pattern ")" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //   ")" -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //   "_" -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(PatternO = "(", Pattern, ")" => ActionFn(25);)
    //
    pub fn __state291<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Pattern>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (19, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action25(input, __sym0, __sym1, __sym2, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::PatternO(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 292
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["("]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["end"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 ["|"]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type (*) "=>" Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Type = Type (*) "->" Type0 ["->"]
    //   Type = Type (*) "->" Type0 ["=>"]
    //
    //   "->" -> Shift(S221)
    //   "=>" -> Shift(S295)
    //
    pub fn __state292<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state221(input, __lookbehind, __tokens, __sym3, __sym4));
            }
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state295(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 293
    //   (Case)+ = (Case)+ (*) Case ["end"]
    //   (Case)+ = (Case)+ (*) Case ["|"]
    //   Case = (*) "|" Pattern "=>" Term ["end"]
    //   Case = (*) "|" Pattern "=>" Term ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["("]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["end"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["match"]
    //   Match = "match" Term "with" (Case)+ (*) "end" ["|"]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ (*) "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "end" -> Shift(S296)
    //   "|" -> Shift(S160)
    //
    //   Case -> S198
    pub fn __state293<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state296(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym3.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Case(__nt) => {
                    let __sym4 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym3, __sym4));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 294
    //   Match = "match" Term "with" "end" (*) ["("]
    //   Match = "match" Term "with" "end" (*) ["end"]
    //   Match = "match" Term "with" "end" (*) ["match"]
    //   Match = "match" Term "with" "end" (*) ["|"]
    //   Match = "match" Term "with" "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "end" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "match" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   "|" -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", "end" => ActionFn(72);)
    //
    pub fn __state294<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action72(input, __sym0, __sym1, __sym2, __sym3, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 295
    //   Literal = (*) r#"[1-9][0-9]+"# ["("]
    //   Literal = (*) r#"[1-9][0-9]+"# ["end"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["match"]
    //   Literal = (*) r#"[1-9][0-9]+"# ["|"]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\(\\)"#]
    //   Literal = (*) r#"[1-9][0-9]+"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# ["("]
    //   Literal = (*) r#"\\(\\)"# ["end"]
    //   Literal = (*) r#"\\(\\)"# ["match"]
    //   Literal = (*) r#"\\(\\)"# ["|"]
    //   Literal = (*) r#"\\(\\)"# [r#"[1-9][0-9]+"#]
    //   Literal = (*) r#"\\(\\)"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\(\\)"#]
    //   Literal = (*) r#"\\(\\)"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["("]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["end"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["match"]
    //   Match = (*) "match" Term "with" (Case)+ "end" ["|"]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" (Case)+ "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" ["("]
    //   Match = (*) "match" Term "with" "end" ["end"]
    //   Match = (*) "match" Term "with" "end" ["match"]
    //   Match = (*) "match" Term "with" "end" ["|"]
    //   Match = (*) "match" Term "with" "end" [r#"[1-9][0-9]+"#]
    //   Match = (*) "match" Term "with" "end" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\(\\)"#]
    //   Match = (*) "match" Term "with" "end" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Name = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["("]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["end"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 ["|"]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" (*) Term0 [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal ["("]
    //   Term0 = (*) Literal ["end"]
    //   Term0 = (*) Literal ["match"]
    //   Term0 = (*) Literal ["|"]
    //   Term0 = (*) Literal [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Literal [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Literal [r#"\\(\\)"#]
    //   Term0 = (*) Literal [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match ["("]
    //   Term0 = (*) Match ["end"]
    //   Term0 = (*) Match ["match"]
    //   Term0 = (*) Match ["|"]
    //   Term0 = (*) Match [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Match [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Match [r#"\\(\\)"#]
    //   Term0 = (*) Match [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name ["("]
    //   Term0 = (*) Name ["end"]
    //   Term0 = (*) Name ["match"]
    //   Term0 = (*) Name ["|"]
    //   Term0 = (*) Name [r#"[1-9][0-9]+"#]
    //   Term0 = (*) Name [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) Name [r#"\\(\\)"#]
    //   Term0 = (*) Name [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" ["("]
    //   Term0 = (*) "(" Term ")" ["end"]
    //   Term0 = (*) "(" Term ")" ["match"]
    //   Term0 = (*) "(" Term ")" ["|"]
    //   Term0 = (*) "(" Term ")" [r#"[1-9][0-9]+"#]
    //   Term0 = (*) "(" Term ")" [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) "(" Term ")" [r#"\\(\\)"#]
    //   Term0 = (*) "(" Term ")" [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["("]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["end"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["match"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# ["|"]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[1-9][0-9]+"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\(\\)"#]
    //   Term0 = (*) r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Shift(S258)
    //   "match" -> Shift(S260)
    //   r#"[1-9][0-9]+"# -> Shift(S261)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S262)
    //   r#"\\(\\)"# -> Shift(S263)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Shift(S264)
    //
    //   Literal -> S253
    //   Match -> S254
    //   Name -> S255
    //   Term0 -> S297
    pub fn __state295<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state258(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state260(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state261(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state262(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state263(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state264(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Literal(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state253(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Match(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state254(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Name(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state255(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Term0(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state297(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 296
    //   Match = "match" Term "with" (Case)+ "end" (*) ["("]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["end"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["match"]
    //   Match = "match" Term "with" (Case)+ "end" (*) ["|"]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[1-9][0-9]+"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\(\\)"#]
    //   Match = "match" Term "with" (Case)+ "end" (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "end" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "match" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   "|" -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[1-9][0-9]+"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\(\\)"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Match = "match", Term, "with", (Case)+, "end" => ActionFn(73);)
    //
    pub fn __state296<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Term>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<::std::vec::Vec<Case>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __nt = super::__action73(input, __sym0, __sym1, __sym2, __sym3, __sym4, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Match(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 297
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["("]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["end"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["match"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) ["|"]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[1-9][0-9]+"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"[a-zA-Z_][a-zA-Z0-9_]*"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\(\\)"#]
    //   Term = "fun" Arg+ ":" Type "=>" Term0 (*) [r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"#]
    //
    //   "(" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "end" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "match" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   "|" -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[1-9][0-9]+"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\(\\)"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //   r#"\\?[a-zA-Z_][a-zA-Z0-9_]*"# -> Reduce(Term = "fun", Arg+, ":", Type, "=>", Term0 => ActionFn(69);)
    //
    pub fn __state297<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<::std::vec::Vec<(Name, Term)>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Term>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Term>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (13, _), _)) |
            Some((_, (16, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action69(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, &__lookbehind, &__lookahead);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Term(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__Module::parse_Module;
mod __intern_token {
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub struct __Matcher<'input> {
        text: &'input str,
        consumed: usize,
    }

    fn __tokenize(text: &str) -> Option<(usize, usize)> {
        let mut __chars = text.char_indices();
        let mut __current_match: Option<(usize, usize)> = None;
        let mut __current_state: usize = 0;
        loop {
            match __current_state {
                0 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '(' => {
                            __current_match = Some((0, __index + 1));
                            __current_state = 1;
                            continue;
                        }
                        ')' => {
                            __current_match = Some((1, __index + 1));
                            __current_state = 2;
                            continue;
                        }
                        '-' => {
                            __current_state = 3;
                            continue;
                        }
                        '1' => {
                            __current_state = 4;
                            continue;
                        }
                        '2' => {
                            __current_state = 4;
                            continue;
                        }
                        '3' => {
                            __current_state = 4;
                            continue;
                        }
                        '4' => {
                            __current_state = 4;
                            continue;
                        }
                        '5' => {
                            __current_state = 4;
                            continue;
                        }
                        '6' => {
                            __current_state = 4;
                            continue;
                        }
                        '7' => {
                            __current_state = 4;
                            continue;
                        }
                        '8' => {
                            __current_state = 4;
                            continue;
                        }
                        '9' => {
                            __current_state = 4;
                            continue;
                        }
                        ':' => {
                            __current_match = Some((3, __index + 1));
                            __current_state = 5;
                            continue;
                        }
                        '=' => {
                            __current_state = 6;
                            continue;
                        }
                        '?' => {
                            __current_state = 7;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 9;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((7, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 13;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 14;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '|' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                1 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        ')' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 18;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                2 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                3 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '-' => {
                            __current_state = 19;
                            continue;
                        }
                        '>' => {
                            __current_match = Some((2, __index + 1));
                            __current_state = 20;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                4 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                5 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '=' => {
                            __current_match = Some((4, __index + 1));
                            __current_state = 22;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                6 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '>' => {
                            __current_match = Some((5, __index + 1));
                            __current_state = 23;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                7 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        'A' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                8 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                9 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                10 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                11 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 26;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                12 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 27;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 28;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                13 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((11, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 30;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                14 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 31;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 32;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                15 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 33;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                16 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                17 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                18 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                19 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\\' => {
                            __current_state = 34;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 34;
                            continue;
                        }
                    }
                }
                20 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                21 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                22 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                23 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                24 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                25 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 36;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                26 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                27 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((9, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                28 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 39;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                29 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                30 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 40;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                31 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 41;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                32 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 42;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                33 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 43;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                34 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\\' => {
                            __current_state = 34;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 34;
                            continue;
                        }
                    }
                }
                35 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '\\' => {
                            __current_state = 34;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 35;
                            continue;
                        }
                        _ => {
                            __current_state = 34;
                            continue;
                        }
                    }
                }
                36 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((6, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                37 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((8, __index + 1));
                            __current_state = 45;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                38 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                39 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 46;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                40 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                41 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 47;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                42 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 48;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                43 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 49;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                44 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                45 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                46 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 50;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                47 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 51;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                48 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 52;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                49 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                50 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((10, __index + 1));
                            __current_state = 53;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                51 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                52 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 54;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                53 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                54 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'A' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'B' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'C' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'D' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'E' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'F' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'G' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'H' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'I' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'J' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'K' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'L' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'M' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'N' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'O' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'P' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'R' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'S' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'T' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'U' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'V' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'W' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'X' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'Z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        's' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        't' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 8;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                _ => { panic!("invalid state {}", __current_state); }
            }
        }
    }

    impl<'input> __Matcher<'input> {
        pub fn new(s: &'input str) -> __Matcher<'input> {
            __Matcher { text: s, consumed: 0 }
        }
    }

    impl<'input> Iterator for __Matcher<'input> {
        type Item = Result<(usize, (usize, &'input str), usize), __ParseError<usize,(usize, &'input str),()>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_left();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                match __tokenize(__text) {
                    Some((__index, __length)) => {
                        let __result = &__text[..__length];
                        let __remaining = &__text[__length..];
                        let __end_offset = __start_offset + __length;
                        self.text = __remaining;
                        self.consumed = __end_offset;
                        Some(Ok((__start_offset, (__index, __result), __end_offset)))
                    }
                    None => {
                        Some(Err(__ParseError::InvalidToken { location: __start_offset }))
                    }
                }
            }
        }
    }
}

pub fn __action0<
    'input,
>(
    input: &'input str,
    __0: Module,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Module
{
    (__0)
}

pub fn __action1<
    'input,
>(
    input: &'input str,
    _: &'input str,
    n: String,
    ds: ::std::vec::Vec<Definition>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Module
{
    Module {
        name: n,
        defs: ds,
    }
}

pub fn __action2<
    'input,
>(
    input: &'input str,
    d: Data,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Definition
{
    Definition::Data(d)
}

pub fn __action3<
    'input,
>(
    input: &'input str,
    f: Function,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Definition
{
    Definition::Fn(f)
}

pub fn __action4<
    'input,
>(
    input: &'input str,
    c: (),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Definition
{
    Definition::Comment(())
}

pub fn __action5<
    'input,
>(
    input: &'input str,
    e: Extern,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Definition
{
    Definition::Extern(e)
}

pub fn __action6<
    'input,
>(
    input: &'input str,
    _: &'input str,
    n: String,
    attrs: ::std::vec::Vec<(Name, Term)>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Data
{
    Data {
      name: n,
      ctors: attrs,
  }
}

pub fn __action7<
    'input,
>(
    input: &'input str,
    _: &'input str,
    n: String,
    _: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Name, Term)
{
    (n, t)
}

pub fn __action8<
    'input,
>(
    input: &'input str,
    n: String,
    _: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Name, Term)
{
    (n, t)
}

pub fn __action9<
    'input,
>(
    input: &'input str,
    _: &'input str,
    n: String,
    args: ::std::vec::Vec<(Name, Term)>,
    _: &'input str,
    t: Term,
    _: &'input str,
    body: Term,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Function
{
    Function {
          name: n,
          args: args,
          ty: t,
          body: body,
      }
}

pub fn __action10<
    'input,
>(
    input: &'input str,
    _: &'input str,
    n: String,
    _: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Extern
{
    Extern(n, t)
}

pub fn __action11<
    'input,
>(
    input: &'input str,
    _: &'input str,
    n: String,
    _: &'input str,
    ty: Term,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Name, Term)
{
    (n, ty)
}

pub fn __action12<
    'input,
>(
    input: &'input str,
    _: &'input str,
    args: ::std::vec::Vec<(Name, Term)>,
    _: &'input str,
    t: Term,
    _: &'input str,
    body: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Lambda(args, Box::new(t), Box::new(body))
}

pub fn __action13<
    'input,
>(
    input: &'input str,
    f: Term,
    g: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::App(Box::new(f), Box::new(g))
}

pub fn __action14<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    t
}

pub fn __action15<
    'input,
>(
    input: &'input str,
    n: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Var(n)
}

pub fn __action16<
    'input,
>(
    input: &'input str,
    l: Literal,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Literal(l)
}

pub fn __action17<
    'input,
>(
    input: &'input str,
    m: (Term, Vec<Case>),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Match(Box::new(m.0), m.1)
}

pub fn __action18<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Metavar(__0.to_string())
}

pub fn __action19<
    'input,
>(
    input: &'input str,
    _: &'input str,
    t: Term,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    t
}

pub fn __action20<
    'input,
>(
    input: &'input str,
    _: &'input str,
    scrutinee: Term,
    _: &'input str,
    cs: ::std::vec::Vec<Case>,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Term, Vec<Case>)
{
    (scrutinee, cs)
}

pub fn __action21<
    'input,
>(
    input: &'input str,
    _: &'input str,
    p: Pattern,
    _: &'input str,
    body: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Case
{
    Case {
      pattern: p,
      rhs: body,
  }
}

pub fn __action22<
    'input,
>(
    input: &'input str,
    n: String,
    ns: ::std::vec::Vec<Pattern>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Pattern
{
    Pattern::Constructor(n, ns)
}

pub fn __action23<
    'input,
>(
    input: &'input str,
    n: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Pattern
{
    Pattern::Name(n)
}

pub fn __action24<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Pattern
{
    Pattern::Placeholder
}

pub fn __action25<
    'input,
>(
    input: &'input str,
    _: &'input str,
    p: Pattern,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Pattern
{
    p
}

pub fn __action26<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Type
}

pub fn __action27<
    'input,
>(
    input: &'input str,
    t1: Term,
    _: &'input str,
    t2: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Forall("".to_string(), Box::new(t1), Box::new(t2))
}

pub fn __action28<
    'input,
>(
    input: &'input str,
    t: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    t
}

pub fn __action29<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Type
}

pub fn __action30<
    'input,
>(
    input: &'input str,
    n: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    Term::Var(n)
}

pub fn __action31<
    'input,
>(
    input: &'input str,
    _: &'input str,
    t: Term,
    _: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    t
}

pub fn __action32<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> String
{
    __0.to_owned()
}

pub fn __action33<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Literal
{
    Literal::Int(i64::from_str(__0).unwrap())
}

pub fn __action34<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Literal
{
    Literal::Unit
}

pub fn __action35<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ()
{
    ()
}

pub fn __action36<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Pattern>
{
    vec![]
}

pub fn __action37<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Pattern>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Pattern>
{
    v
}

pub fn __action38<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Case>
{
    vec![]
}

pub fn __action39<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Case>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Case>
{
    v
}

pub fn __action40<
    'input,
>(
    input: &'input str,
    __0: Case,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Case
{
    (__0)
}

pub fn __action41<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<(Name, Term)>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    (__0)
}

pub fn __action42<
    'input,
>(
    input: &'input str,
    __0: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    vec![__0]
}

pub fn __action43<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<(Name, Term)>,
    e: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action44<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<(Name, Term)>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    (__0)
}

pub fn __action45<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    vec![]
}

pub fn __action46<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<(Name, Term)>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    v
}

pub fn __action47<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    vec![]
}

pub fn __action48<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<(Name, Term)>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    v
}

pub fn __action49<
    'input,
>(
    input: &'input str,
    __0: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Name, Term)
{
    (__0)
}

pub fn __action50<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Definition>
{
    vec![]
}

pub fn __action51<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Definition>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Definition>
{
    v
}

pub fn __action52<
    'input,
>(
    input: &'input str,
    __0: Definition,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Definition
{
    (__0)
}

pub fn __action53<
    'input,
>(
    input: &'input str,
    __0: Definition,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Definition>
{
    vec![__0]
}

pub fn __action54<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Definition>,
    e: Definition,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Definition>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action55<
    'input,
>(
    input: &'input str,
    __0: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    vec![__0]
}

pub fn __action56<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<(Name, Term)>,
    e: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action57<
    'input,
>(
    input: &'input str,
    __0: Case,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Case>
{
    vec![__0]
}

pub fn __action58<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Case>,
    e: Case,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Case>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action59<
    'input,
>(
    input: &'input str,
    __0: Pattern,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Pattern>
{
    vec![__0]
}

pub fn __action60<
    'input,
>(
    input: &'input str,
    v: ::std::vec::Vec<Pattern>,
    e: Pattern,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Pattern>
{
    { let mut v = v; v.push(e); v }
}

pub fn __action61<
    'input,
>(
    input: &'input str,
    __0: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    let __temp0 = __action49(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action55(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action62<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<(Name, Term)>,
    __1: (Name, Term),
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    let __temp0 = __action49(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action56(
        input,
        __0,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action63<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: String,
    __2: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Data
{
    let __temp0 = __action47(
        input,
        __lookbehind,
        __lookahead,
    );
    __action6(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action64<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: String,
    __2: ::std::vec::Vec<(Name, Term)>,
    __3: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Data
{
    let __temp0 = __action48(
        input,
        __2,
        __lookbehind,
        __lookahead,
    );
    __action6(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action65<
    'input,
>(
    input: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    let __temp0 = __action45(
        input,
        __lookbehind,
        __lookahead,
    );
    __action44(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action66<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<(Name, Term)>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<(Name, Term)>
{
    let __temp0 = __action46(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action44(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action67<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: String,
    __2: &'input str,
    __3: Term,
    __4: &'input str,
    __5: Term,
    __6: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Function
{
    let __temp0 = __action65(
        input,
        __lookbehind,
        __lookahead,
    );
    __action9(
        input,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action68<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: String,
    __2: ::std::vec::Vec<(Name, Term)>,
    __3: &'input str,
    __4: Term,
    __5: &'input str,
    __6: Term,
    __7: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Function
{
    let __temp0 = __action66(
        input,
        __2,
        __lookbehind,
        __lookahead,
    );
    __action9(
        input,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action69<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: ::std::vec::Vec<(Name, Term)>,
    __2: &'input str,
    __3: Term,
    __4: &'input str,
    __5: Term,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Term
{
    let __temp0 = __action41(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action12(
        input,
        __0,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action70<
    'input,
>(
    input: &'input str,
    __0: Case,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Case>
{
    let __temp0 = __action40(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action57(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action71<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<Case>,
    __1: Case,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Case>
{
    let __temp0 = __action40(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action58(
        input,
        __0,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action72<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: Term,
    __2: &'input str,
    __3: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Term, Vec<Case>)
{
    let __temp0 = __action38(
        input,
        __lookbehind,
        __lookahead,
    );
    __action20(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action73<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: Term,
    __2: &'input str,
    __3: ::std::vec::Vec<Case>,
    __4: &'input str,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> (Term, Vec<Case>)
{
    let __temp0 = __action39(
        input,
        __3,
        __lookbehind,
        __lookahead,
    );
    __action20(
        input,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action74<
    'input,
>(
    input: &'input str,
    __0: Definition,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Definition>
{
    let __temp0 = __action52(
        input,
        __0,
        __lookbehind,
        __lookahead,
    );
    __action53(
        input,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action75<
    'input,
>(
    input: &'input str,
    __0: ::std::vec::Vec<Definition>,
    __1: Definition,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> ::std::vec::Vec<Definition>
{
    let __temp0 = __action52(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action54(
        input,
        __0,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action76<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Module
{
    let __temp0 = __action50(
        input,
        __lookbehind,
        __lookahead,
    );
    __action1(
        input,
        __0,
        __1,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action77<
    'input,
>(
    input: &'input str,
    __0: &'input str,
    __1: String,
    __2: ::std::vec::Vec<Definition>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Module
{
    let __temp0 = __action51(
        input,
        __2,
        __lookbehind,
        __lookahead,
    );
    __action1(
        input,
        __0,
        __1,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action78<
    'input,
>(
    input: &'input str,
    __0: String,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Pattern
{
    let __temp0 = __action36(
        input,
        __lookbehind,
        __lookahead,
    );
    __action22(
        input,
        __0,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub fn __action79<
    'input,
>(
    input: &'input str,
    __0: String,
    __1: ::std::vec::Vec<Pattern>,
    __lookbehind: &Option<usize>,
    __lookahead: &Option<(usize, (usize, &'input str), usize)>,
) -> Pattern
{
    let __temp0 = __action37(
        input,
        __1,
        __lookbehind,
        __lookahead,
    );
    __action22(
        input,
        __0,
        __temp0,
        __lookbehind,
        __lookahead,
    )
}

pub trait __ToTriple<'input, > {
    type Error;
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),Self::Error>;
}

impl<'input, > __ToTriple<'input, > for (usize, (usize, &'input str), usize) {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, (usize, &'input str), usize),()> {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        value
    }
}
